import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import org.ajoberstar.grgit.Grgit

import java.nio.file.Files
import java.nio.file.Paths
import java.text.SimpleDateFormat

apply plugin: 'org.openrepose.gradle.plugins.linkchecker'

def username = System.properties['user.name']
def uid = ["id", "-u", username].execute().text.trim()
def gid = ["id", "-g", username].execute().text.trim()

task copySrc(type: Copy) {
    // Copy the Repose Docs source.
    from(fileTree("${project.projectDir}/src/asciibinder"))

    // Place all source into the build directory.
    into("${project.buildDir}/asciibinder")
}

task copyTemplates(type: Copy) {
    // Copy the Repose Docs source.
    from(fileTree("${project.projectDir}/src/templates"))

    // Place all source into the build directory.
    into("${project.buildDir}/asciibinder")

    expand(version: version)
}

task asciibinderGit(dependsOn: [copySrc, copyTemplates]) {
    doLast {
        def grgit = Grgit.init(dir: "${project.buildDir}/asciibinder")
        grgit.add(patterns: ['.'])
        grgit.commit(message: 'initial_commit')
    }
}

task asciibinderDockerRun(type: Exec, dependsOn: asciibinderGit) {
    workingDir "${project.buildDir}/asciibinder"
    commandLine 'docker', 'run', '--tty', '--user', "${uid}:${gid}", '--volume', "${project.buildDir}/asciibinder:/docs:z", 'projectatomic/ascii_binder:v0.1.13'
}

task asciibinderRmGit(type: Exec, dependsOn: asciibinderDockerRun) {
    workingDir "${project.buildDir}/asciibinder"
    commandLine 'rm', '-Rf', '.git'
}

task asciibinder(dependsOn: asciibinderRmGit, group: 'build', description: 'Builds the latest version of the docs') {
}

task copyXsds(type: Copy, dependsOn: asciibinder) {
    // Copy the Repose Core configuration schemas.
    from(fileTree("${project.rootDir}/repose-aggregator/core/repose-core-api").include('**/src/main/resources/META-INF/schema/**/*.xsd').files)

    // Copy all filter and service configuration schemas.
    from(fileTree("${project.rootDir}/repose-aggregator/components").include('**/src/main/resources/META-INF/schema/config/*.xsd').files)
    // Copy all datastore service configuration schemas.
    from(fileTree("${project.rootDir}/repose-aggregator/components").include('**/src/main/resources/META-INF/schema/*-datastore/*.xsd').files)

    // Place all schemas into a schemas directory.
    into("${project.buildDir}/asciibinder/_package/main/${version}/schemas/")
}

task copyUbuntuDockerfile(type: Copy, dependsOn: asciibinder) {
    // Copy the Repose Ubuntu Dockerfile.
    from("${project.rootDir}/repose-aggregator/artifacts/docker/src/docker/ubuntu/Dockerfile")

    // Place the file into a resources subdirectory.
    into("${project.buildDir}/asciibinder/_package/main/${version}/resources/ubuntu/")

}

task copyCentosDockerfile(type: Copy, dependsOn: asciibinder) {
    // Copy the Repose CentOS Dockerfile.
    from("${project.rootDir}/repose-aggregator/artifacts/docker/src/docker/centos/Dockerfile")

    // Place the file into a resources subdirectory.
    into("${project.buildDir}/asciibinder/_package/main/${version}/resources/centos/")
}

task asciibindersearchDockerRun(type: Exec, dependsOn: [copyXsds, copyCentosDockerfile, copyUbuntuDockerfile]) {
    workingDir "${project.buildDir}/asciibinder"
    commandLine 'docker', 'run', '--tty', '--volume', "${project.buildDir}/asciibinder:/docs:z", 'python:3', '/bin/sh', '-c', 'pip install git+https://github.com/smitthakkar96/ascii_binder_search_plugin && cd /docs && ascii_binder_search -i front_end_indexer -v'
}

task asciibindersearchDockerChown(type: Exec, dependsOn: asciibindersearchDockerRun, group: 'build', description: 'Builds the search for the latest version of the docs') {
    workingDir "${project.buildDir}/asciibinder"
    commandLine 'docker', 'run', '--tty', '--volume', "${project.buildDir}/asciibinder:/docs:z", 'python:3', '/bin/chown', '-R', "${uid}:${gid}", '/docs'
}

task asciibindersearch(dependsOn: asciibindersearchDockerChown, group: 'build', description: 'Builds the search for the latest version of the docs') {
}

linkchecker {
    inputDir = file("${buildDir}/asciibinder/_package/main")
    httpURLConnectionTimeout = 1000
    ignoreHostRegexs = [
        /one\.rackspace\.com/,      // Prevents an infinite loop issue.
        /openrepose\.org/,          // Prevents a false positive.
        /repose\.atlassian\.net/,   // Saves ~30 secs.
    ]
}

task('stageDocs', dependsOn: asciibindersearch) {
    doLast {
        def workingDir = project.file("${project.buildDir}/gh-pages")

        workingDir.deleteDir()

        def repo = Grgit.clone(
            uri: 'git@github.com:rackerlabs/repose.git',
            refToCheckout: 'gh-pages',
            dir: workingDir,
        )

        // Amend the versions list
        def versionsFile = project.file("${project.buildDir}/gh-pages/_includes/versions.json")
        def versionsJson = new JsonSlurper().parse(versionsFile)
        def modifiedVersions = versionsJson.versions.collect { new Version(id: it.id, released: it.released) }
        def newVersionIndex = modifiedVersions.findIndexOf { compareVersions(String.valueOf(version), it.id) > 0 }
        def date = new SimpleDateFormat('yyyy-MM-dd').format(new Date())
        newVersionIndex = newVersionIndex == -1 ? modifiedVersions.size() : newVersionIndex
        modifiedVersions.add(newVersionIndex, new Version(id: String.valueOf(version), released: date))

        // Write the versions list as JSON
        def jsonWriter = new PrintWriter(versionsFile.newWriter())
        jsonWriter.println(JsonOutput.prettyPrint(JsonOutput.toJson(versions: modifiedVersions)))
        jsonWriter.close()

        // Write the versions includes file
        def includesWriter = new PrintWriter(project.file("${project.buildDir}/gh-pages/_includes/versions.html"))
        includesWriter.println("""<option value="latest">Latest</option>""")
        modifiedVersions.forEach { Version v ->
            includesWriter.println("""<option value="${v.id}">v${v.id}</option>""")
        }
        includesWriter.close()

        // Update the latest link, if applicable
        def latestLinkPath = project.buildDir.toPath().resolve(Paths.get('gh-pages', 'versions', 'latest'))
        if (newVersionIndex == 0) {
            Files.deleteIfExists(latestLinkPath)
            Files.createSymbolicLink(latestLinkPath, Paths.get(String.valueOf(version)))
        }

        copy {
            from("${project.rootDir}/repose-docs/src/resources")
            into("${project.buildDir}/gh-pages/")
        }

        copy {
            from "${project.buildDir}/asciibinder/_package/main/${version}"
            into "${project.buildDir}/gh-pages/versions/$version"
        }

        copy {
            from "${project.buildDir}/asciibinder/_package/main/data_${version}.json"
            into "${project.buildDir}/gh-pages/versions/"
        }

        copy {
            from "${project.buildDir}/asciibinder/_package/main/"
            into "${project.buildDir}/gh-pages/versions/"
        }
    }
}

task('publishDocs', dependsOn: stageDocs, group: 'release', description: 'Adds the new version of the docs to github pages') {
        doLast {
        repo.with {
            add(patterns: ['.'])
            commit(message: "Adding documentation for $version")
            push()
        }
    }
}

build.dependsOn asciibindersearch
tasks.linkchecker.dependsOn asciibindersearch
check.dependsOn tasks.linkchecker
publishDocs.dependsOn project.tasks.getByPath(':buildAll')
project.tasks.getByPath(':release').dependsOn publishDocs

/**
 * @return -1 if v1 is a lower version than v2, 0 if they are equal, and 1 if v1 is a greater version than v2
 */
int compareVersions(String v1, String v2) {
    List<String> v1Parts = v1.tokenize('.')
    List<String> v2Parts = v2.tokenize('.')

    int minLen = Math.min(v1Parts.size(), v2Parts.size())

    // Compare each number from the versions until either the numbers do not match,
    // or the end of a version string is hit.
    for (int i = 0; i < minLen; ++i) {
        int n1 = v1Parts[i] as int
        int n2 = v2Parts[i] as int

        if (n1 != n2) {
            return n1 <=> n2
        }
    }

    // If we got this far, then one version is a substring of the other.
    // Therefore, whichever version is longer is the greater version.
    return v1Parts.size() <=> v2Parts.size()
}

boolean isLatestVersion(String version, List<String> otherVersions) {
    return !otherVersions.any {
        it ==~ /(\d+\.)*\d+/ && compareVersions(version, it) < 0
    }
}

class Version {
    String id
    String released
}
