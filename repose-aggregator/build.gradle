import org.ajoberstar.grgit.Grgit
import java.text.SimpleDateFormat

apply plugin: 'org.asciidoctor.convert'

dependencies {
    asciidoctor 'org.asciidoctor:asciidoctorj-diagram'
}

task copyXsds(type: Copy) {
    // Copy the Repose Core configuration schemas.
    from("${project.projectDir}/core/repose-core-api/src/main/resources/META-INF/schema/container/container-configuration.xsd")
    from("${project.projectDir}/core/repose-core-api/src/main/resources/META-INF/schema/metrics/metrics.xsd")
    from("${project.projectDir}/core/repose-core-api/src/main/resources/META-INF/schema/system-model/system-model.xsd")

    // Copy all filter and service configuration schemas.
    from(fileTree("${project.projectDir}/components").include('**/src/main/resources/META-INF/schema/config/*.xsd').files)

    // Place all schemas into a schemas directory.
    into("${project.buildDir}/asciidoc/html5/schemas/")
}

asciidoctor {
    requires 'asciidoctor-diagram'
    attributes 'source-highlighter': 'coderay',
               'stylesdir': "${project.projectDir}/src/docs/asciidoc/_stylesheets",
               'stylesheet': 'repose.css',
               'toc': 'left',
               'icons': 'font',
               'docinfo1': ''

    resources {
        from 'src/docs/resources'

        into '.'
    }
}

task('publishDocs', dependsOn: asciidoctor, group: 'release', description: 'Adds the new version of the docs to github pages') << {
    def workingDir = project.file("${project.buildDir}/gh-pages")

    workingDir.deleteDir()

    def repo = Grgit.clone(
            uri: 'git@github.com:rackerlabs/repose.git',
            refToCheckout: 'gh-pages',
            dir: workingDir,
    )

    //add to versions list
    def versionsFile = project.file("${project.buildDir}/gh-pages/_includes/versions.html")
    def versions = versionsFile.readLines()
    def date = new SimpleDateFormat('yyyy-MM-dd').format(new Date())
    versions.add(0, """<li><a href="./versions/$version/index.html">v$version</a> - $date</li>""")
    def writer = new PrintWriter(versionsFile.newWriter())
    versions.each {
        writer.println(it)
    }
    writer.close()

    copy {
        from "${asciidoctor.outputDir}/html5"
        into "${project.buildDir}/gh-pages/versions/$version"
    }

    repo.with {
        add(patterns: ['.'])
        commit(message: "Adding documentation for $version")
        push()
    }
}

project.tasks.getByPath(':release').dependsOn publishDocs

asciidoctor.dependsOn copyXsds
build.dependsOn asciidoctor
