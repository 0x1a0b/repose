Api Validator multimatch tests ported from python

 This is a test of the API Validator component, its multimatch feature in
 particular.

 The treatment of each configured validator by the filter can be broken down
 into the following hierarchy:

     -> Not considered (N)
     -> Considered (C)      -> Skipped (S)
     -> Considered (C)      -> Tried (T)    -> Passed (P)
     -> Considered (C)      -> Tried (T)    -> Failed (F, F4, or F5)

 There are two kinds of failures:
 if the request is for a resource that isn't present in the wadl, a 404 will
 be returned (F4)
 if the request uses a method that is not allowed for the specified resouce,
 a 405 will be returned (F5)

 If none of the roles match, then the response code will be 403. As a result,
 this is denoted as 'F3', although no validator can be configured to return a
 403.

 If @multi-role-match is false and none of the roles match (all S), then the
 default validator will be tried afterwards.
 If @multi-role-match is true, then the default will be tried before any other
 validators.

 We define some notation:

 Notation for validator configuration
 Sequence of symbols representing the validators in order, and what they
 would result in if tried. If multi-match is enabled, then the sequence is
 preceded by 'M'

     F4F4PF5F5
     MF4PF5P

 Notation for test
 Validator configuration notation, followed by '\' and a number (or numbers)
 indicating which validators will be tried, followed by '->' and the
 expected result. Expected result is one of (P, F3, F4, F5).

     F4F4PF5F5\3 -> P
     P\0 -> F3

 Notation for test with default
 Same as above, except it begins with a validator configuration with
 parentheses '(' and ')' around the symbol for the default validator. This
 is followed by an equals sign '=' and the equivalent test if we hadn't been
 using any default.

     F4(F5)\1 = F4F5F5\1,3 -> F4
     MF5(P)F4\3 = MPF5PF4\1,4 -> P

 Notation for effective pattern
 A sequence of 'P', 'F', 'S', or 'N', each indicating how the filter should
 treat the validator in that position. If multi-match, preceded by 'M'.

     SSPNN
     MF4SSP

 The test cases below are intended to cover all of the required behaviors.
 Obviously, we can't comprehensively test the set of all possible configurations
 of the filter, so we select a few which cover the required functionality. We
 model the treatment of validators (see effective pattern above) as a state
 machine. We then list the transitions between states that align with the
 desired behavior. Here, 'O' represents the start of the list and 'X' the end.

 Single-match
 ------------

 State transition table

       | P F S N X
     -------------
     O | Y Y Y N ?
     P | N N N Y Y
     F | N N N Y Y
     S | Y Y Y N Y
     N | N N N Y Y

 (The '?' denotes the case where the start is immediately followed by the
 end of the list. That is, no validators are defined in the configuration.
 The functional specification does not cover this case, so we do not test
 it.)

 From this, we determine that the valid transitions are:

     OP, OF, OS,
     PN, PX,
     FN, FX,
     SP, SF, SS, SX,
     NN, NX

 The following sequences cover all of the above transitions:

     SSPNN   OS, SS, SP, PN, NN, NX
     P       OP, PX
     F       OF, FX
     S       OS, SX
     SFN     OS, SF, FN, NX


 Multi-match
 -----------

 State transition table

       | P F S N X
     -------------
     O | Y Y Y N ?
     P | N N N Y Y
     F | Y Y Y N Y
     S | Y Y Y N Y
     N | N N N Y Y

 Valid transitions:

     OP, OF, OS,
     PN, PX,
     FP, FF, FS, FX,
     SP, SF, SS, SX,
     NN, NX

 Covering sequences:

     MSSFSFFPNN  OS, SS, SF, FS, FF, FP, PN, NN, NX
     MP          OP, PX
     MF          OF, FX
     MS          OS, SX
     MSP         OS, SP, PX


 Test Cases
 ----------

 config'd pattern            effective pattern       exp. result

 single-match:
 F4F4PF5F5\3                 SSPNN                   P
 P\0                         S                       F3
 P\1                         P                       P
 F4\1                        F4                      F4
 PF4F5\2                     SF4N                    F4

 single-match with default:
 F4(F5)\1 = F4F5F5\1,3       F4NN                    F4
 F4(F5)\0 = F4F5F5\3         SSF5                    F5

 multi-match:
 MF4F4F5F4F5F5PF4F4\3,5,6,7  MSSF5SF5F5PNN           P
 MF4F4F5F4F5F5PF4F4\3,5,6    MSSF5SF5F5SSS           F5
 MP\0                        MS                      F3
 MP\1                        MP                      P
 MF4\1                       MF4                     F4
 MF4P\2                      MSP                     P

 multi-match with default:
 MF5(P)F4\3 = MPF5PF4\1,4    MPNNN                   P
 MF5(F4)P\3 = MF4F5F4P\1,4   MF4SSP                  P
 MP(F4)F5\3 = MF4PF4F5\1,4   MF4SSF5                 F5
 MP(F4)P\0 = MF4PF4P\1       MF4SSS                  F4



 Future, outside-the-box considerations
 --------------------------------------
 roles
     are leading and trailing spaces trimmed?
     can tabs work as well as spaces?
     are leading and trailing tabs trimmed?
     what about other unicode whitespace?
 qvalue
     make sure not specifying q actually translates to the default of 1
     what happens if q is < 0 or > 1?
     what happens if q is not a number?
