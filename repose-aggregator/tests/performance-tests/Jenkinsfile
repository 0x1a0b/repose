#!/usr/bin/env groovy

properties([
        buildDiscarder(logRotator(numToKeepStr: '14')),
        pipelineTriggers([cron('H H(0-7) * * *')]),
        parameters([string(
                defaultValue: "",
                description: "Optional - Extra options to add to the end of the ansible-playbook command.",
                name: "extraOptions")])
])

def perfTests = []

stage("Determine performance tests to run") {
    node("performance") {
        checkout scm
        dir("repose-aggregator/tests/performance-tests/test_vars") {
            def files = findFiles(glob: "**/*.yml")
            for (int index = 0; index < files.size(); index++) {
                perfTests.add(files[index].path.replace(".yml", ""))
            }
        }
    }
}

stage("Performance Test") {
    def performanceJenkinsJob = "performance-test"
    def cleanupJenkinsJob = "performance-test-cleanup"
    def performanceTestParam = "perf_test"
    def extraOptionsParam = "extra_options"
    def tenMinutesInSeconds = 600
    def random = new Random()

    def jobsToRun = [:]

    for (int index = 0; index < perfTests.size(); index++) {
        def perfTest = perfTests[index]
        jobsToRun[perfTest] = {
            try {
                retry(3) {
                    build(job: performanceJenkinsJob,
                            quietPeriod: random.nextInt(tenMinutesInSeconds),
                            parameters: [
                                    [$class: "StringParameterValue", name: performanceTestParam, value: perfTest],
                                    [$class: "StringParameterValue", name: extraOptionsParam, value: params.extraOptions]])
                }
            } finally {
                build(job: cleanupJenkinsJob,
                      quietPeriod: 0,
                      parameters: [
                                [$class: "StringParameterValue", name: performanceTestParam, value: perfTest],
                                [$class: "StringParameterValue", name: extraOptionsParam, value: params.extraOptions]])
            }
        }
    }

    // starts the list of jobs to build in parallel
    parallel(jobsToRun)
}
