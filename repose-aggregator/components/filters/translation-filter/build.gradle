dependencies {
    compile project(":repose-aggregator:core:repose-core-api")
    compile project(":repose-aggregator:commons:commons-utilities")
    compile project(":repose-aggregator:commons:commons-configuration")
    compile "org.slf4j:slf4j-api"
    compile "org.slf4j:jcl-over-slf4j"
    compile "org.springframework:spring-beans"
    compile "org.springframework:spring-web"
    compile "net.sf.saxon:Saxon-EE"
    compile "com.fasterxml.jackson.core:jackson-core"
    compile "commons-pool:commons-pool"
    compile "xalan:xalan"
    compile "xerces:xerces-xsd11"

    compileOnly "javax.servlet:javax.servlet-api"
    compileOnly "javax.inject:javax.inject"

    testCompile "junit:junit"
    testCompile "org.scala-lang:scala-library"
    testCompile "org.scalatest:scalatest_$scalaMajDotMin"
    testCompile "org.codehaus.groovy:groovy-all"
    testCompile "org.hamcrest:hamcrest-library"
    testCompile "org.mockito:mockito-core"
    testCompile "org.springframework:spring-test"
    testCompile "commons-io:commons-io"
    testCompile "org.xmlunit:xmlunit-matchers"
    testCompile "org.spockframework:spock-core"
}

license {
    excludes(["version.properties", "configuration.xml", "pipeline-library.xml", "request-post-process.xsl", "xml.xsd",
              "xproc-papi.xsd", "xproc.xsd", "query-parameters.xml", "post_server_req_v1.0.xml", "headers.xml",
              "request.xml", "post_server_req_v1.1.xsl", "add-element.xsl", "empty.xml", "identity.xsl",
              "remove-me-element.xml", "remove-element.xsl", "style.xsl", "request-information.xml"].collect {"**/$it"})
}

jacocoTestCoverageVerification {
    violationRules {
        rules.forEach { rule ->
            rule.limits.forEach { limit ->
                if (limit.counter == 'INSTRUCTION' && limit.value == 'COVEREDRATIO') {
                    // todo: set to the current coverage -- need more coverage, but we don't want the build to fail for the baseline
                    limit.minimum = 0.59
                }
            }
        }
    }
}
