import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage
import groovy.json.JsonSlurper

apply plugin: 'com.bmuschko.docker-remote-api'

String reposeVersion = project.hasProperty('repose-version') ? project.property('repose-version') as String : version as String

docker {
    url = "unix:///var/run/docker.sock"

    registryCredentials {
        username = project.hasProperty('dockerhub.username') ? project.property('dockerhub.username') : 'Need to provide a Docker Hub username'
        password = project.hasProperty('dockerhub.password') ? project.property('dockerhub.password') : 'Need to provide a Docker Hub password'
        email = 'reposecore@rackspace.com'
    }
}

['Ubuntu': '', 'Centos': '-centos'].forEach { baseImage, tagSuffix ->
    task("build${baseImage}ImageLocal", type: DockerBuildImage) {
        inputDir = file("$projectDir/src/docker/${baseImage.toLowerCase()}")
        buildArgs = ['REPOSE_VERSION': reposeVersion]
    }

    task("build${baseImage}Image") {
        dependsOn "build${baseImage}ImageLocal"
        finalizedBy "remove${baseImage}Image"
    }

    task("tag${baseImage}ImageVersion", type: DockerTagImage) {
        dependsOn "build${baseImage}Image"
        repository = 'rackerlabs/repose'
        tag = reposeVersion + tagSuffix
        targetImageId { tasks["build${baseImage}ImageLocal"].getImageId() }
    }

    task("tag${baseImage}ImageLatest", type: DockerTagImage) {
        dependsOn "build${baseImage}Image"
        repository = 'rackerlabs/repose'
        tag = "latest${tagSuffix}"
        targetImageId { tasks["build${baseImage}ImageLocal"].getImageId() }
    }

    task("push${baseImage}ImageVersion", type: DockerPushImage) {
        dependsOn "tag${baseImage}ImageVersion"
        imageName = 'rackerlabs/repose'
        tag = reposeVersion + tagSuffix
    }

    task("push${baseImage}ImageLatest", type: DockerPushImage) {
        dependsOn "tag${baseImage}ImageLatest"
        imageName = 'rackerlabs/repose'
        tag = "latest${tagSuffix}"
    }

    task("push${baseImage}Image") {
        group = 'docker'
        dependsOn "push${baseImage}ImageVersion", "push${baseImage}ImageLatest"
    }

    task("remove${baseImage}Image", type: DockerRemoveImage) {
        dependsOn "build${baseImage}Image"
        mustRunAfter "tag${baseImage}ImageVersion", "tag${baseImage}ImageLatest", "push${baseImage}ImageVersion", "push${baseImage}ImageLatest"
        targetImageId { tasks["build${baseImage}ImageLocal"].getImageId() }
        force = true
    }

    tasks["push${baseImage}ImageLatest"].onlyIf { isLatestDockerHubVersion(reposeVersion) }
}

private static final boolean isLatestDockerHubVersion(String version) {
    boolean isLatest = true

    String nextPage = 'https://hub.docker.com/v2/repositories/rackerlabs/repose/tags/'
    while (nextPage && isLatest) {
        Map jsonObject = new JsonSlurper().parse(new URL(nextPage)) as Map
        List<String> otherVersions = jsonObject.results.collect { it.name }

        if (!isLatestVersion(version, otherVersions)) {
            isLatest = false
        }

        nextPage = jsonObject.next
    }

    return isLatest
}

private static final boolean isLatestVersion(String version, List<String> otherVersions) {
    return !otherVersions.any {
        it ==~ /(\d+\.)*\d+/ && compareVersions(version, it) < 0
    }
}

/**
 - * @return -1 if v1 is a lower version than v2, 0 if they are equal, and 1 if v1 is a greater version than v2
 - */
private static final compareVersions(String v1, String v2) {
    List<String> v1Parts = v1.tokenize('.')
    List<String> v2Parts = v2.tokenize('.')

    int minLen = Math.min(v1Parts.size(), v2Parts.size())

    // Compare each number from the versions until either the numbers do not match,
    // or the end of a version string is hit.
    for (int i = 0; i < minLen; ++i) {
        int n1 = v1Parts[i] as int
        int n2 = v2Parts[i] as int

        if (n1 != n2) {
            return n1 <=> n2
        }
    }

    // If we got this far, then one version is a substring of the other.
    // Therefore, whichever version is longer is the greater version.
    return v1Parts.size() <=> v2Parts.size()
}
