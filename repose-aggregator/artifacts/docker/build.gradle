import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage
import groovy.json.JsonSlurper

apply plugin: 'com.bmuschko.docker-remote-api'

// This forces the usage of a more recent unix-socket-factory which makes Mac OS X happy
// It also forces the usage of jackson dependencies which were not being brought in as expected
// TODO: Remove unix-socket-factory after upgrading to gradle-docker-plugin 3.0.4
configurations {
    dockerJava {
        resolutionStrategy {
            force 'de.gesellix:unix-socket-factory:2016-04-06T22-21-19'
            force 'com.fasterxml.jackson.core:jackson-databind:2.6.4'
            force 'com.fasterxml.jackson.core:jackson-core:2.6.4'
            force 'com.fasterxml.jackson.core:jackson-annotations:2.6.4'
        }
    }
}

String reposeVersion = project.hasProperty('repose-version') ? project.property('repose-version') as String : version as String

docker {
    url = "unix:///var/run/docker.sock"

    registryCredentials {
        username = project.hasProperty('dockerhub.username') ? project.property('dockerhub.username') : 'Need to provide a Docker Hub username'
        password = project.hasProperty('dockerhub.password') ? project.property('dockerhub.password') : 'Need to provide a Docker Hub password'
        email = 'reposecore@rackspace.com'
    }
}

task buildImage(type: DockerBuildImage) {
    finalizedBy 'removeImage'
    inputDir = file("$projectDir/src/docker")
    buildArgs = ['REPOSE_VERSION': reposeVersion]
    // TODO: Set "forcerm" to true once the Docker Gradle plugin supports it
}

task tagImageVersion(type: DockerTagImage) {
    dependsOn 'buildImage'
    repository = 'rackerlabs/repose'
    tag = reposeVersion
    targetImageId { buildImage.getImageId() }
}

task tagImageLatest(type: DockerTagImage) {
    dependsOn 'buildImage'
    repository = 'rackerlabs/repose'
    tag = 'latest'
    targetImageId { buildImage.getImageId() }
}

task pushImageVersion(type: DockerPushImage) {
    dependsOn 'tagImageVersion'
    imageName = 'rackerlabs/repose'
    tag = reposeVersion
}

task pushImageLatest(type: DockerPushImage) {
    dependsOn 'tagImageLatest'
    imageName = 'rackerlabs/repose'
    tag = 'latest'
}

task pushImage {
    dependsOn 'pushImageVersion', 'pushImageLatest'
}

task removeImage(type: DockerRemoveImage) {
    dependsOn 'buildImage'
    mustRunAfter 'tagImageVersion', 'tagImageLatest', 'pushImageVersion', 'pushImageLatest'
    targetImageId { buildImage.getImageId() }
    force = true
}

boolean isLatestDockerHubVersion(String version) {
    boolean isLatest = true

    String nextPage = 'https://hub.docker.com/v2/repositories/rackerlabs/repose/tags/'
    while (nextPage && isLatest) {
        Map jsonObject = new JsonSlurper().parse(new URL(nextPage)) as Map
        List<String> otherVersions = jsonObject.results.collect { it.name }

        if (!isLatestVersion(version, otherVersions)) {
            isLatest = false
        }

        nextPage = jsonObject.next
    }

    return isLatest
}

pushImageLatest.onlyIf { isLatestVersion(reposeVersion) }
