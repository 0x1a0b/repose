import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage

apply plugin: 'com.bmuschko.docker-remote-api'

// This forces the usage of a more recent unix-socket-factory which makes Mac OS X happy
// It also forces the usage of jackson dependencies which were not being brought in as expected
// TODO: Remove unix-socket-factory after upgrading to gradle-docker-plugin 3.0.4
configurations {
    dockerJava {
        resolutionStrategy {
            force 'de.gesellix:unix-socket-factory:2016-04-06T22-21-19'
            force 'com.fasterxml.jackson.core:jackson-databind:2.6.4'
            force 'com.fasterxml.jackson.core:jackson-core:2.6.4'
            force 'com.fasterxml.jackson.core:jackson-annotations:2.6.4'
        }
    }
}

String reposeVersion = project.hasProperty('repose-version') ? project.property('repose-version') as String : version as String

docker {
    url = "unix:///var/run/docker.sock"

    registryCredentials {
        username = project.hasProperty('dockerhub.username') ? project.property('dockerhub.username') : 'Need to provide a Docker Hub username'
        password = project.hasProperty('dockerhub.password') ? project.property('dockerhub.password') : 'Need to provide a Docker Hub password'
        email = 'reposecore@rackspace.com'
    }
}

task buildImage(type: DockerBuildImage) {
    finalizedBy 'removeImage'
    inputDir = file("$projectDir/src/docker")
    buildArgs = ['REPOSE_VERSION': reposeVersion]
    // TODO: Set "forcerm" to true once the Docker Gradle plugin supports it
}

task tagImageVersion(type: DockerTagImage) {
    dependsOn 'buildImage'
    repository = 'rackerlabs/repose'
    tag = reposeVersion
    targetImageId { buildImage.getImageId() }
}

task tagImageLatest(type: DockerTagImage) {
    dependsOn 'buildImage'
    repository = 'rackerlabs/repose'
    tag = 'latest'
    targetImageId { buildImage.getImageId() }
}

task pushImageVersion(type: DockerPushImage) {
    dependsOn 'tagImageVersion'
    imageName = 'rackerlabs/repose'
    tag = reposeVersion
}

task pushImageLatest(type: DockerPushImage) {
    dependsOn 'tagImageLatest'
    imageName = 'rackerlabs/repose'
    tag = 'latest'
}

task removeImage(type: DockerRemoveImage) {
    dependsOn 'buildImage'
    mustRunAfter 'tagImageVersion', 'tagImageLatest', 'pushImageVersion', 'pushImageLatest'
    targetImageId { buildImage.getImageId() }
    force = true
}

static int compareVersions(String v1, String v2) {
    List<String> v1Parts = v1.tokenize('.')
    List<String> v2Parts = v2.tokenize('.')

    int minLen = Math.min(v1Parts.size(), v2Parts.size())

    // Compare each number from the versions until either the numbers do not match,
    // or the end of a version string is hit.
    for (int i = 0; i < minLen; ++i) {
        int n1 = v1Parts[i] as int
        int n2 = v1Parts[i] as int

        if (n1 != n2) {
            return n1 <=> n2
        }
    }

    // If we got this far, then one version is a substring of the other.
    // Therefore, whichever version is longer is the greater version.
    return v1Parts.size() <=> v2Parts.size()
}

static boolean isLatestVersion(String v) {
    // TODO: Fetch tags
    // TODO: Handle paging
    // TODO: Throw out any tags that do not start with a number
    // TODO: Compare versions
    return true
}

pushImageLatest.onlyIf { isLatestVersion(reposeVersion) }

project.tasks.getByPath(':release').dependsOn pushImageVersion, pushImageLatest
