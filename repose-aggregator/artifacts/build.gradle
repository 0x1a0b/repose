import groovyx.net.http.ContentTypes
import io.github.httpbuilderng.http.HttpTask

import static groovyx.net.http.NativeHandlers.Encoders

apply plugin: 'io.github.http-builder-ng.http-plugin'

// Informs Gradle that child projects must be evaluated (i.e., configured) before this project.
// Doing so is necessary in order to use the configurations from child projects to generate
// the requests for publication (via configuration of the HttpTask).
evaluationDependsOnChildren()

configurations {
    debBundle
    rpmBundle
}

dependencies {
    debBundle project(path: ':repose-aggregator:artifacts:cli-utils', configuration: 'deb')
    debBundle project(path: ':repose-aggregator:artifacts:valve', configuration: 'deb')
    debBundle project(path: ':repose-aggregator:artifacts:filter-bundle', configuration: 'deb')
    debBundle project(path: ':repose-aggregator:artifacts:extensions-filter-bundle', configuration: 'deb')
    debBundle project(path: ':repose-aggregator:artifacts:experimental-filter-bundle', configuration: 'deb')

    rpmBundle project(path: ':repose-aggregator:artifacts:cli-utils', configuration: 'rpm')
    rpmBundle project(path: ':repose-aggregator:artifacts:valve', configuration: 'rpm')
    rpmBundle project(path: ':repose-aggregator:artifacts:filter-bundle', configuration: 'rpm')
    rpmBundle project(path: ':repose-aggregator:artifacts:extensions-filter-bundle', configuration: 'rpm')
    rpmBundle project(path: ':repose-aggregator:artifacts:experimental-filter-bundle', configuration: 'rpm')
}

task('publishToPackageRepo', type: HttpTask, group: 'publishing') {
    description 'Publishes the DEB and RPM packages to the package repository'
    dependsOn configurations.debBundle, configurations.rpmBundle, tasks.getByPath(':buildAll')


    config {
        if (!project.hasProperty('nexus.openrepose.username')) {
            throw new GradleException('The "nexus.openrepose.username" property is required')
        }
        if (!project.hasProperty('nexus.openrepose.password')) {
            throw new GradleException('The "nexus.openrepose.password" property is required')
        }

        request.uri = 'https://nexus.openrepose.org'
        request.auth.basic getProperty('nexus.openrepose.username') as String, getProperty('nexus.openrepose.password') as String
        request.contentType = ContentTypes.BINARY[0]
        request.encoder ContentTypes.BINARY[0], Encoders.&binary
    }

    // PUT the rpm packages in the Nexus Yum repository
    configurations.rpmBundle.files.each { rpmFile ->
        put {
            request.uri.path = "/repository/el/${rpmFile.name}"
            request.body = rpmFile.bytes

            response.success {
                logger.lifecycle 'Successfully uploaded {}', rpmFile.name
            }
        }
    }

    // POST the deb packages in the Nexus APT repository
    configurations.debBundle.files.each { debFile ->
        post {
            request.uri.path = "/repository/debian/"
            request.body = debFile.bytes

            response.success {
                logger.lifecycle 'Successfully uploaded {}', debFile.name
            }
        }
    }
}

tasks.getByPath(':release').dependsOn publishToPackageRepo
