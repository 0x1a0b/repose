<?xml version="1.0" encoding="UTF-8"?>

<xs:schema elementFormDefault="qualified" attributeFormDefault="unqualified"
           targetNamespace="http://openrepose.org/repose/validator/v1.0"
           xmlns:scr="http://openrepose.org/repose/validator/v1.0"
           xmlns:html="http://www.w3.org/1999/xhtml"
           xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning"
           xmlns:xerces="http://xerces.apache.org"
           xmlns:saxon="http://saxon.sf.net/"
           xmlns:xs="http://www.w3.org/2001/XMLSchema">

    <!-- Enumeration and SimpleType definitions -->
    <xs:simpleType name="StringList">
        <xs:list itemType="xs:string"/>
    </xs:simpleType>

    <!-- Configuration Schema Definitions -->
    <xs:element name="validators" type="scr:ValidatorConfiguration"/>

    <xs:complexType name="ValidatorConfiguration">

        <xs:annotation>
            <xs:documentation>
                <html:p>


                </html:p>
            </xs:documentation>
        </xs:annotation>

        <xs:sequence>
            <xs:element name="validator" type="scr:ValidatorItem" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>

        <xs:attribute name="multi-role-match" type="xs:boolean" use="optional" default="false">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        set to true will match validators to header 'x-roles' and all matches are
                        validated until one of them is valid. In the event that all matches are invalid, the response
                        returned will be that of the last matched validator. Set to false or not set will match
                        validators
                        to header 'x-roles' and only first match is validated.
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>


    </xs:complexType>

    <xs:simpleType name="XSLEngine">
        <xs:restriction base="xs:string">
            <xs:enumeration value="XalanC"/>
            <xs:enumeration value="Xalan"/>
            <xs:enumeration value="Saxon"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="ValidatorItem">
        <xs:sequence>
            <xs:any minOccurs="0" namespace="##any" processContents="skip"/>
        </xs:sequence>

        <xs:attribute name="role" type="scr:StringList" use="required">
            <xs:annotation>
                <xs:documentation>
                    <html:p>List of roles that are applied on single validator. Triggers off of 'x-roles' header
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="default" type="xs:boolean" use="optional" default="false">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Set to use this validator if no 'x-roles' header is passed.
                        If the api-validator config 'multi-match' is set to true then teh default validator
                        will be the first validator to process the incoming request.
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="wadl" type="xs:anyURI" use="optional">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Location of wadl to associate with configured validator. This attribute is optional.
                        If not specified, then the wadl needs to be embedded within the validator element.
                        Can be located within the file system or pointed to a remote file.
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="dot-output" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        dot output file for this validator
                        DOT is a plain text graph description language.
                        It is a simple way of describing graphs that both humans and computer programs can use.
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="xpath-version" type="xs:int" use="optional" default="1">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        XPath version used in the WADL.
                        Can be 1 or 2.
                        If 1 is set the Xalan implementation will be used, if 2 then Saxon will be used
                        Note that XPath 2 with schema awareness requires a Saxon license.

                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="check-well-formed" type="xs:boolean" use="optional" default="false">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Check Well-Formed XML and JSON

                        The XML Syntax rules for Well-Formed XML are:
                        All XML elements must have a closing tag.
                        XML tags are case-sensitive.
                        All XML elements must be properly nested.
                        All XML documents must have a root element.
                        Attribute values must always be quoted.
                        With XML, white space is preserved.

                        TODO: Restricitons for a well formed JSON
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="check-xsd-grammar" type="xs:boolean" use="optional" default="false">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Check all XML against XSD Grammars
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="check-elements" type="xs:boolean" use="optional" default="false">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Ensure elements are correct
                        <!-- What does that mean??? -->
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="use-saxon" type="xs:boolean" use="optional" default="false">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Use SAXON-EE for XSD validation: This means that in cases where XSD validation needs to be done
                        use the Saxon XSD validator instead of the default Xerces validator.
                        Note that the Saxon validator requires a license.
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="check-plain-params" type="xs:boolean" use="optional" default="false">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Check plain parameters
                        <!-- What does that mean??? -->
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="do-xsd-grammar-transform" type="xs:boolean" use="optional" default="false">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Allow XSD grammar transform. Transform the XML after validation, to fill in things like default
                        values etc
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="enable-pre-process-extension" type="xs:boolean" use="optional" default="true">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Enable preprocess extension
                        <!-- What does that mean??? -->
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="remove-dups" type="xs:boolean" use="optional" default="false">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Don't allow duplicate nodes in the state machine
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="validate-checker" type="xs:boolean" use="optional" default="false">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Deprecated: This attribute is deprecated and will always be considered true.
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="xsl-engine" type="scr:XSLEngine" use="optional" default="XalanC">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        The XSL 1.0 engine to use. Possible choices are Xalan, XalanC, and Saxon
                        Note that Saxon is an XSL 2.0 engine, but most 1.0 XSLs should work fine.
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="join-xpath-checks" type="xs:boolean" use="optional" default="false">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        This is an optimization where the well formed check and multiple XPath checks can be merged into
                        a single check.
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="check-headers" type="xs:boolean" use="optional" default="false">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Check that required headers are set.
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="enable-ignore-xsd-extension" type="xs:boolean" use="optional" default="true">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Enables the use of the rax:ignoreXSD extension in WADL files to exclude some representations
                        from validation against the XSD. Default values is true if not specified
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:attribute name="validator-name" type="xs:string" use="optional">
            <xs:annotation>
                <xs:documentation>
                    <html:p>
                        Sets the name for this validator item. The name is used as the MBean name
                        when connecting to Repose via JMX.
                    </html:p>
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

        <xs:assert vc:minVersion="1.1"
                   test="count(tokenize(string(@role), ' ')) = count(distinct-values(tokenize(string(@role), ' ')))"
                   xerces:message="Roles list must contain unique roles"
                   saxon:message="Roles list must contain unique roles"/>

        <xs:assert vc:minVersion="1.1" test="if (count(./*)>0) then not (@wadl) else true()"
                   xerces:message="Cannot define wadl file and embedded wadl"
                   saxon:message="Cannot define wadl file and embedded wadl"/>

        <xs:assert vc:minVersion="1.1" test="if (@wadl) then not (count(./*)>0) else true()"
                   xerces:message="Cannot define wadl file and embedded wadl"
                   saxon:message="Cannot define wadl file and embedded wadl"/>

        <xs:assert vc:minVersion="1.1" test="if (not(@wadl)) then (count(./*)>0) else true()"
                   xerces:message="Must define a wadl file OR an embedded wadl"
                   saxon:message="Must define a wadl file OR an embedded wadl"/>

        <xs:assert vc:minVersion="1.1" test="if (not(count(./*)>0)) then (@wadl) else true()"
                   xerces:message="Must define a wadl file OR an embedded wadl"
                   saxon:message="Must define a wadl file OR an embedded wadl"/>
    </xs:complexType>
</xs:schema>
