<?xml version="1.0" encoding="UTF-8"?>

<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified"
           targetNamespace="http://docs.rackspacecloud.com/repose/http-connection-pool/v1.0"
           xmlns:cp="http://docs.rackspacecloud.com/repose/http-connection-pool/v1.0"
           xmlns:xerces="http://xerces.apache.org"
           xmlns:saxon="http://saxon.sf.net/"
           xmlns:html="http://www.w3.org/1999/xhtml"
           xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning"
           xmlns:xs="http://www.w3.org/2001/XMLSchema">


    <!-- Enumeration and SimpleType definitions -->
    <xs:simpleType name="PositiveInt">
        <xs:restriction base="xs:int">
            <xs:minInclusive value="0"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- Enumeration and SimpleType definitions -->
    <xs:simpleType name="NegativeOneAndAllPositiveInt">
        <xs:restriction base="xs:int">
            <xs:minInclusive value="-1"/>
        </xs:restriction>
    </xs:simpleType>


    <xs:simpleType name="HttpType">
        <xs:annotation>
            <xs:documentation>
                <html:p>
                    HTTP version
                </html:p>
            </xs:documentation>
        </xs:annotation>

        <xs:restriction base="xs:string">
            <xs:enumeration value="1.0" />
            <xs:enumeration value="1.1" />
        </xs:restriction>
    </xs:simpleType>

    <!-- Configuration Schema Definitions -->
    <xs:element name="http-connection-pool" type="cp:HttpConnectionPoolConfig"/>

    <xs:complexType name="HttpConnectionPoolConfig">

        <xs:annotation>
            <xs:documentation>A list of configuration settings to use when creating a pool of HTTP connections
            </xs:documentation>
        </xs:annotation>

        <xs:sequence>
            <xs:element type="cp:poolsType" name="pools" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="poolsType">
          <xs:sequence>
              <xs:element type="cp:poolType" name="pool" minOccurs="1" maxOccurs="unbounded"/>
          </xs:sequence>

          <xs:assert vc:minVersion="1.1"
                     test="count(distinct-values(pool/@id)) = count(pool/@id)"
                     xerces:message="Pools must have unique ids"
                     saxon:message="Pools must have unique ids" xpathDefaultNamespace="##targetNamespace"/>

          <xs:assert vc:minVersion="1.1"
                     test="count(cp:pool[xs:boolean(@default)=true()]) &lt;=1"
                     xerces:message="Only one default pool may be defined"
                     saxon:message="Only one default pool may be defined"/>

      </xs:complexType>



    <xs:complexType name="poolType">

        <xs:all>
            <xs:element name="http.protocol.version" type="cp:HttpType" minOccurs="0" maxOccurs="1" default="1.1"/>
            <xs:element name="http.conn-manager.max-total" type="cp:PositiveInt" minOccurs="0" maxOccurs="1"
                        default="100">
                <xs:annotation>
                    <xs:documentation>Connection Pool Management setting: max total concurrent connections that will be
                        created by a connection pool manager
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="http.conn-manager.max-per-route" type="cp:PositiveInt" minOccurs="0" maxOccurs="1"
                        default="5">
                <xs:annotation>
                    <xs:documentation>Connection Pool Management setting: max total concurrent connections for a route
                        that will be created by a connection pool manager.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="http.socket.timeout" type="cp:PositiveInt" minOccurs="0" maxOccurs="1" default="0">
                <xs:annotation>
                    <xs:documentation>Defines the socket timeout (SO_TIMEOUT) in milliseconds, which is the timeout for
                        waiting for data or, put differently, a maximum period inactivity between two consecutive data
                        packets). A timeout value of zero is interpreted as an infinite timeout. This parameter expects
                        a value of type java.lang.Integer. If this parameter is not set, read operations will not
                        time out (infinite timeout).
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="http.socket.linger" type="cp:NegativeOneAndAllPositiveInt" minOccurs="0" maxOccurs="1"
                        default="-1">
                <xs:annotation>
                    <xs:documentation>Sets SO_LINGER with the specified linger time in seconds. The maximum timeout
                        value is platform specific.
                        Value 0 implies that the option is disabled. Value -1 implies that the JRE default is used. The
                        setting only affects the socket close operation.
                        If this parameter is not set, the value -1 (JRE default) will be assumed.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="http.socket.buffer-size" type="cp:PositiveInt" minOccurs="0" maxOccurs="1" default="8192">
                <xs:annotation>
                    <xs:documentation>Determines the size of the internal socket buffer used to buffer data while
                        receiving / transmitting HTTP messages.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="http.connection.timeout" type="cp:PositiveInt" minOccurs="0" maxOccurs="1" default="0">
                <xs:annotation>
                    <xs:documentation>Determines the timeout in milliseconds until a connection is established. A
                        timeout value of zero is interpreted as an infinite timeout.
                        If this parameter is not set, connect operations will not time out (infinite timeout).
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="http.connection.max-line-length" type="cp:PositiveInt" minOccurs="0" maxOccurs="1"
                        default="0">
                <xs:annotation>
                    <xs:documentation>Determines the maximum line length limit. If set to a positive value, any HTTP
                        line exceeding this limit will cause an java.io.IOException. A zero value will
                        effectively disable the check and no limit will be enforced.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="http.connection.max-header-count" type="cp:PositiveInt" minOccurs="0" maxOccurs="1"
                        default="0">
                <xs:annotation>
                    <xs:documentation>Determines the maximum HTTP header count allowed. If set to a positive value, the
                        number of HTTP headers received from the data stream exceeding this limit will cause an
                        java.io.IOException. A zero value will effectively disable the check and no limit will be
                        enforced.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="http.connection.max-status-line-garbage" type="cp:PositiveInt" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>Defines the maximum number of ignorable lines before we expect a HTTP response's
                        status line. With HTTP/1.1 persistent connections, the problem arises that broken scripts could
                        return a wrong Content-Length (there are more bytes sent than specified). Unfortunately, in some
                        cases, this cannot be detected after the bad response, but only before the next one. So
                        HttpClient must be able to skip those surplus lines this way. 0 disallows all garbage/empty
                        lines
                        before the status line. Use java.lang.Integer#MAX_VALUE for unlimited number.
                        If this parameter is not set, unlimited number will be assumed.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="http.tcp.nodelay" type="xs:boolean" minOccurs="0" maxOccurs="1" default="true">
                <xs:annotation>
                    <xs:documentation>Determines whether Nagle's algorithm is to be used. Nagle's algorithm tries to
                        conserve bandwidth by minimizing the number of segments that are sent. When applications wish to
                        decrease network latency and increase performance, they can disable Nagle's algorithm (that is
                        enable TCP_NODELAY. Data will be sent earlier, at the cost of an increase in bandwidth
                        consumption. If this parameter is not set, TCP_NODELAY will be enabled (no delay).
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:all>

        <xs:attribute name="id" type="xs:string" use="required"/>
        <xs:attribute name="default" type="xs:boolean" use="optional" default="false">
            <xs:annotation>
                <xs:documentation>
                    Determines whether or not this pool configuration should
                    be considered the default when a pool of HTTP connections is requested from the service.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>

    </xs:complexType>

</xs:schema>