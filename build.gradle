buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.2.0'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.0.3'
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://maven.research.rackspacecloud.com/content/groups/aggregate/"
    }
}

group = 'com.rackspace.lefty'
def baseVersion = '1.0.0'
version = project.hasProperty('release') ? baseVersion : "$baseVersion-SNAPSHOT"
def reposeVersion = '8.6.1.1'

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'org.unbroken-dome.test-sets'
apply plugin: 'nebula.provided-base'
apply plugin: 'checkstyle'
apply plugin: 'codenarc'
apply plugin: 'jacoco'
apply plugin: 'idea'
apply plugin: 'ear'

configurations {
    integrationTestRunnable
    integrationTestBundle
}

testSets {
    integrationTest
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

dependencies {
    provided "javax.servlet:javax.servlet-api:3.1.0"

    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-all:1.9.5"

    integrationTestCompile "org.codehaus.groovy:groovy-all:2.4.3"
    integrationTestCompile "org.spockframework:spock-core:0.7-groovy-2.0"
    integrationTestCompile "org.openrepose:functional-test-framework:$reposeVersion"
    integrationTestCompile "org.rackspace:deproxy:0.21"

    integrationTestRunnable "org.openrepose:valve:$reposeVersion:all"

    integrationTestBundle "org.openrepose:filter-bundle:$reposeVersion@ear"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

checkstyle {
    configFile = file("$rootDir/config/styles/checkstyle.xml")
    sourceSets = sourceSets.matching {it.name != 'generated'}
}

codenarc {
    configFile = file("$rootDir/config/styles/codenarc.xml")
}

jacoco {
    toolVersion = "0.7.6.201602180812"
}

test {
    jacoco {
        destinationFile = file("$rootDir/build/jacoco/jacocoTest.exec")
    }
}

integrationTest {
    jacoco {
        destinationFile = file("$rootDir/build/jacoco/jacocoIntegrationTest.exec")
    }
    systemProperty 'jacocoArguments', jacoco.getAsJvmArg()
}

task copyArtifacts() {
    dependsOn(":ear")
    ext.outputDir = "$buildDir/repose_home"
    inputs.files(configurations.integrationTestRunnable.files,
                 configurations.integrationTestBundle.files,
                 ear.outputs.files)
    outputs.dir outputDir

    doLast {
        //copy the runnables
        file(outputDir).mkdirs()
        copy {
            from configurations.integrationTestRunnable.files
            into outputDir
        }

        //copy the bundles
        file("$outputDir/artifacts").mkdirs()
        copy {
            from configurations.integrationTestBundle.files
            into "$outputDir/artifacts"
        }
        copy {
            from ear.outputs.files
            into "$outputDir/artifacts"
        }
    }
}

task copyConfigs() {
    ext.outputDir = "$buildDir/configs"
    inputs.dir "$projectDir/src/integrationTest/configs"
    outputs.dir outputDir

    doLast {
        //copy the configs
        file(outputDir).mkdirs()
        copy {
            from "$projectDir/src/integrationTest/configs"
            into outputDir
        }
    }
}

integrationTest.dependsOn copyArtifacts, copyConfigs

def container = "valve"
def targetHostName = "localhost"
def valveFileName = configurations.integrationTestRunnable.files.first().toString().split("/").last()

processIntegrationTestResources {
    expand(
            reposeHome: copyArtifacts.outputDir,
            version: reposeVersion,
            testRootDir: buildDir,
            configTemplates: copyConfigs.outputDir,
            reposeContainer: container,
            valveLocation: "${copyArtifacts.outputDir}/$valveFileName",
            targetHostname: targetHostName
    )
}
