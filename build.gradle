buildscript {
    repositories {
        maven { url 'http://repo.spring.io/plugins-release' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.6'
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'groovy'

//We want to have all these plugins configured for us
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'

//All our projects will use mavenCentral for their maven source (at least)
    repositories {
        mavenCentral()
        maven {
            //TODO: maybe need creds: http://gradle.org/docs/current/userguide/dependency_management.html#sub:maven_repo
            url "https://maven.research.rackspacecloud.com/content/groups/aggregate"
        }
        maven {
            //For play-json
            url "http://repo.typesafe.com/typesafe/maven-releases"
        }
    }
    /*
 * If you want to override dependencies, you can do it here. You can also ban them from here I think
 */
    configurations {
        all {
            resolutionStrategy.eachDependency {
                //Make sure that all commons-loggings are replaced by the jcl-over-slf4j bridge
                if (it.requested.name == 'commons-logging') {
                    it.useTarget 'org.slf4j:jcl-over-slf4j:1.7.7'
                }
            }
        }
        //Needed to set up the scala compiler by hand
        scalaCompiler
        //I need a jaxb configuration classpath
        jaxbTasks
    }
/*
 * Set our source levels
 */
    compileJava {
        sourceCompatibility = "1.7"
        targetCompatibility = "1.7"
    }

//Tell the scala compile tasks not to use the ant based compiler
    tasks.withType(ScalaCompile) {
        scalaCompileOptions.useAnt = false
    }

    /**
     * This pile of stuff is required to have scalac be our joint java/scala compiler and avoid having to specify
     * it for each project. The alternative is to specify the sourceSets logic on projects where java code depends
     * on scala code (in the same project). There's no other way to alter the ordering of the compile steps, java
     * always gets compiled first.
     */
    //Tell this project to do joint compilation
    sourceSets.main.scala.srcDir "src/main/java"
    sourceSets.main.java.srcDirs = []

    //This is separate from the rest of the dependencies to make it obvious why it's here
    dependencies {
        scalaCompiler "org.scala-lang:scala-compiler:${scalaVersion}"

    }

    tasks.withType(ScalaCompile) {
        scalaClasspath = configurations.scalaCompiler
    }
    /**
     * END OF MANUAL SCALA COMPILER SETTING
     */

    group = "org.openrepose"

/**
 * Create all the source directories, a handy task
 */
    task 'create-dirs' << {
        sourceSets.all { set ->
            set.allSource.srcDirs.each { it.mkdirs() }
        }
    }

    test {
        //Set this for stupid xml and it's anger at log4j2
        systemProperty "javax.xml.parsers.DocumentBuilderFactory", "com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl"

        filter {
            includeTestsMatching "*Test"
        }
    }

    dependencies {
        testCompile "org.codehaus.groovy:groovy-all:2.1.3",
                "org.spockframework:spock-core:0.7-groovy-2.0",
                "org.hamcrest:hamcrest-all:1.3",                //This order matters!
                "org.powermock:powermock-module-junit4:1.5.4",  //This order matters!
                "org.powermock:powermock-api-mockito:1.5.4",    //This order matters!
                "org.mockito:mockito-all:1.9.5",                //This order matters!
                "junit:junit:4.11",                          //This order matters!
                "org.glassfish:javax.servlet:3.1", //TODO: This shouldn't be here
                "javax:javaee-web-api:6.0", //TODO: this shouldn't be here
                "javax.transaction:transaction-api:1.1", //TODO: this shouldn't be here

                "org.apache.logging.log4j:log4j-api:${log4jVersion}",
                "org.apache.logging.log4j:log4j-core:${log4jVersion}",
                "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
        testCompile("com.mockrunner:mockrunner-servlet:1.0.0") {
            exclude module: 'commons-logging'
            exclude module: 'servlet-api'
            exclude module: 'xercesImpl'
        }


        testCompile group: "org.apache.logging.log4j", name: "log4j-core", version: "${log4jVersion}", classifier: "tests"

        //Use the latest version of the zinc compiler
        zinc "com.typesafe.zinc:zinc:0.3.7"

        //Jaxb compiler stuffs
        jaxbTasks 'com.sun.xml.bind:jaxb-xjc:2.2.7-b41',
                'com.sun.xml.bind:jaxb-impl:2.2.7-b41',
                'javax.xml.bind:jaxb-api:2.2.7'


    }

    /**
     * Jaxb translation tasks that needs to happen before the jaxb stuff can actually be run
     * This removes the XSD 1.1 elements that jaxb does not support
     */

    def jaxbSafeXSDSources = "${projectDir}/build/src/generated-xsd"
    def generatedSources = "${projectDir}/build/src/generated-sources"

    //Don't forget to add that generated sources to the list of things we need to do
    //ADD IT TO THE SCALA SOURCES
    sourceSets.main.scala.srcDirs += generatedSources

    task transformXSDs() {
        description "Makes our XSDs safe for jaxb, because XSD 1.1, or just copy them if there's no XSD to translate"

        def targetDir = file(jaxbSafeXSDSources)

        def schemaBaseDir = "$projectDir/src/main/resources/META-INF/schema"
        def xsltFile = "${rootDir}/gradle/xsl/remove-1.1-elements.xsl"

        //If they set a property for the jaxbXSLT file override our default
        if (project.hasProperty('jaxbXsltFile')) {
            xsltFile = project.jaxbXsltFile
        }

        if (project.hasProperty('jaxbSchemaBase')) {
            schemaBaseDir = project.jaxbSchemaBase
        }

        inputs.files(
                fileTree(dir: schemaBaseDir, includes: ["**/*.xsd", "**/*.xjb"]),
                file(xsltFile)
        )
        outputs.dir jaxbSafeXSDSources

        doLast {
            targetDir.mkdirs()

            //Find all XSDs in the src/main/resources/META-INF.schema
            if (file(xsltFile).exists()) {
                logger.lifecycle("Transforming Schemas")
                ant.xslt(
                        extension: '.xsd',
                        basedir: schemaBaseDir,
                        includes: "**/*.xsd",
                        style: xsltFile,
                        destdir: "${jaxbSafeXSDSources}"
                )
            } else {
                logger.lifecycle("NOT Transforming Schemas")
                ant.copy(todir: jaxbSafeXSDSources) {
                    fileset(dir: schemaBaseDir, includes: "**/*.xsd")

                }

            }

            //Copy over any bindings.xjb into their appropriate directories
            ant.copy(
                    todir: jaxbSafeXSDSources
            ) {
                fileset(dir: schemaBaseDir, includes: "**/*.xjb")
            }
        }
    }

    /**
     * Not using the jaxb plugin because it cannot support multiple directories of .binding files:
     * https://github.com/jacobono/gradle-jaxb-plugin#jaxb-plugin-convention
     * it cannot handle subfolders, so we'd have to specify the task each time for each folder
     */
    task jaxb(dependsOn: 'transformXSDs') {
        description "compiles XSDs to classes"
        def jaxbTargetDir = file(generatedSources)
        inputs.source(jaxbSafeXSDSources)
        outputs.dir generatedSources

        doLast {
            jaxbTargetDir.mkdirs()
            ant.taskdef(name: 'xjc',
                    classname: 'com.sun.tools.xjc.XJCTask',
                    classpath: configurations.jaxbTasks.asPath
            )
            ant.jaxbTargetDir = jaxbTargetDir
            logger.lifecycle("Generating the JaxBees")
            ant.xjc(
                    destdir: '${jaxbTargetDir}',
                    extension: true //Some of our jaxb stuff requires extensions...
            ) {
                schema(dir: jaxbSafeXSDSources, includes: "**/*.xsd")
                binding(dir: jaxbSafeXSDSources, includes: "**/*.xjb")
            }
        }
    }
}

project(":repose-aggregator:commons:configuration") {
    dependencies {
        compile project(":repose-aggregator:commons:utilities"),
                project(":repose-aggregator:core:core-service-api"),
                "xerces:xerces-xsd11:2.12.0-rax",
                "xalan:xalan:2.7.1",
                "commons-pool:commons-pool:${commonsPoolVersion}"

        testCompile "org.scala-lang:scala-library:${scalaVersion}",
                "org.scalatest:scalatest_2.10:$scalaTestVersion",
                "com.typesafe.scala-logging:scala-logging-slf4j_2.10:${scalaLoggingVersion}"
    }
}

project(":repose-aggregator:commons:utilities") {
    dependencies {
        compile project(":repose-aggregator:services:httpclient:api"),
                "org.jvnet.jaxb2_commons:jaxb2-basics-runtime:${jaxbRuntimeVersion}",
                "org.apache.httpcomponents:httpclient:$httpClientVersion",
                "commons-pool:commons-pool:$commonsPoolVersion",
                "commons-codec:commons-codec:1.10",
                "org.apache.commons:commons-lang3:$commonsLangVersion",
                "com.typesafe.scala-logging:scala-logging-slf4j_2.10:$scalaLoggingVersion",
                "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
                "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",
                "javax.ws.rs:javax.ws.rs-api:2.0.1",
                "org.apache.logging.log4j:log4j-api:$log4jVersion",
                "org.glassfish:javax.servlet:3.1", //TODO: this API is some weird hybrid of 2.5 and 3.1.0
                "org.slf4j:slf4j-api:$slf4jVersion",
                "org.apache.httpcomponents:httpcore:$httpClientVersion"

        testCompile "org.scalatest:scalatest_2.10:$scalaTestVersion"

    }
}

project(":repose-aggregator:services:httpclient:api") {
    dependencies {
        compile "org.apache.httpcomponents:httpclient:$httpClientVersion"
    }
}

project(":repose-aggregator:core:core-service-api") {

    //Add this bit if you want JAXB processing to happen first
    //The tasks are customized for the way we store files.
    tasks.compileScala.dependsOn(jaxb)

    dependencies {
        compile "org.jvnet.jaxb2_commons:jaxb2-basics-runtime:${jaxbRuntimeVersion}",
                project(":repose-aggregator:commons:utilities"),
                "com.google.guava:guava:$guavaVersion"
    }
}