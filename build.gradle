buildscript {
    repositories {
        //for the shadow jar and propdeps plugin
        maven { url 'http://repo.spring.io/plugins-release' }
        //maven { url "https://plugins.gradle.org/m2/" }
        //for maven-publish-auth
        maven { url "http://repository.jboss.org/nexus/content/groups/public/" }
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.2'
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.6'
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
    }
}

//This is needed to use the Replace tokens ant task in any projects.
// It cannot be imported in the project, it must be imported at the parent level
import org.apache.tools.ant.filters.ReplaceTokens


allprojects {
    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'groovy'

//We want to have all these plugins configured for us
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'

//All our projects will use mavenCentral for their maven source (at least)
    repositories {
        mavenCentral()
        maven {
            //TODO: maybe need creds: http://gradle.org/docs/current/userguide/dependency_management.html#sub:maven_repo
            url "https://maven.research.rackspacecloud.com/content/groups/aggregate"
        }
        maven {
            //For play-json
            url "http://repo.typesafe.com/typesafe/maven-releases"
        }
    }
    /*
 * If you want to override dependencies, you can do it here. You can also ban them from here I think
 */
    configurations {
        all {
            resolutionStrategy.eachDependency {
                //Make sure that all commons-loggings are replaced by the jcl-over-slf4j bridge
                if (it.requested.name == 'commons-logging') {
                    it.useTarget 'org.slf4j:jcl-over-slf4j:1.7.7'
                }
            }
        }
        //Needed to set up the scala compiler by hand
        scalaCompiler
        //I need a jaxb configuration classpath
        jaxbTasks
    }
/*
 * Set our source levels
 */
    compileJava {
        sourceCompatibility = "1.7"
        targetCompatibility = "1.7"
    }

//Tell the scala compile tasks not to use the ant based compiler
    tasks.withType(ScalaCompile) {
        scalaCompileOptions.useAnt = false
    }

    /**
     * This pile of stuff is required to have scalac be our joint java/scala compiler and avoid having to specify
     * it for each project. The alternative is to specify the sourceSets logic on projects where java code depends
     * on scala code (in the same project). There's no other way to alter the ordering of the compile steps, java
     * always gets compiled first.
     */
    //Tell this project to do joint compilation
    sourceSets.main.scala.srcDir "src/main/java"
    sourceSets.main.java.srcDirs = []

    //This is separate from the rest of the dependencies to make it obvious why it's here
    dependencies {
        scalaCompiler "org.scala-lang:scala-compiler:${scalaVersion}"

    }

    tasks.withType(ScalaCompile) {
        scalaClasspath = configurations.scalaCompiler
    }
    /**
     * END OF MANUAL SCALA COMPILER SETTING
     */

/**
 * Create all the source directories, a handy task
 */
    task 'create-dirs' << {
        sourceSets.all { set ->
            set.allSource.srcDirs.each { it.mkdirs() }
        }
    }

    test {
        //Set this for stupid xml and it's anger at log4j2
        systemProperty "javax.xml.parsers.DocumentBuilderFactory", "com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl"

        filter {
            includeTestsMatching "*Test"
        }
    }

    //Defining some common things that can be referenced elsewhere in other projects, but not *all* projects
    ext {

        //Define a project property that's the default location for the XSL as well as the schema base
        //This is common for like 99% of the repose projects, deviate by overriding it in your own project
        jaxbXsltFile = "${rootDir}/gradle/xsl/remove-1.1-elements.xsl"
        jaxbSchemaBase = "$projectDir/src/main/resources/META-INF/schema"

        //We use these dependencies in pretty much *all* projects. They don't pull in anything too dangerous
        //They're safe to stick on all the projects test classpath
        commonTestDeps = [
                "org.codehaus.groovy:groovy-all:2.1.3",
                "org.spockframework:spock-core:0.7-groovy-2.0",
                "org.hamcrest:hamcrest-all:1.3",                //This order matters!
                "org.powermock:powermock-module-junit4:1.5.4",  //This order matters!
                "org.powermock:powermock-api-mockito:1.5.4",    //This order matters!
                "org.mockito:mockito-all:1.9.5",                //This order matters!
                "junit:junit:4.11",                          //This order matters!
                "org.apache.logging.log4j:log4j-api:${log4jVersion}",
                "org.apache.logging.log4j:log4j-core:${log4jVersion}",
                "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}",
                [group: "org.apache.logging.log4j", name: "log4j-core", version: "${log4jVersion}", classifier: "tests"]
        ]
    }

    dependencies {
        testCompile commonTestDeps
        //TODO: delete all this crap when we get done with the mess!
        //NONE of these things have been necessary explicitly so far (we'll pull in the mockrunner-servlet code when needed
//        testCompile
//                "org.glassfish:javax.servlet:3.1", //TODO: This shouldn't be here
//                "javax:javaee-web-api:6.0", //TODO: this shouldn't be here
//                "javax.transaction:transaction-api:1.1", //TODO: this shouldn't be here

//        testCompile("com.mockrunner:mockrunner-servlet:1.0.0") {
//            exclude module: 'commons-logging'
//            exclude module: 'servlet-api'
//            exclude module: 'xercesImpl'
//        }

        //testCompile group: "org.apache.logging.log4j", name: "log4j-core", version: "${log4jVersion}", classifier: "tests"

        //Use the latest version of the zinc compiler
        zinc "com.typesafe.zinc:zinc:0.3.7"

        //Jaxb compiler stuffs
        jaxbTasks 'com.sun.xml.bind:jaxb-xjc:2.2.7-b41',
                'com.sun.xml.bind:jaxb-impl:2.2.7-b41',
                'javax.xml.bind:jaxb-api:2.2.7'


    }

    /**
     * Jaxb translation tasks that needs to happen before the jaxb stuff can actually be run
     * This removes the XSD 1.1 elements that jaxb does not support
     */
    def jaxbSafeXSDSources = "${projectDir}/build/src/generated-xsd"
    def generatedSources = "${projectDir}/build/src/generated-sources"

    //Don't forget to add that generated sources to the list of things we need to do
    //ADD IT TO THE SCALA SOURCES
    sourceSets.main.scala.srcDirs += generatedSources

    task transformXSDs() {
        description "Makes our XSDs safe for jaxb, because XSD 1.1, or just copy them if there's no XSD to translate"

        def targetDir = file(jaxbSafeXSDSources)

        inputs.files(
                fileTree(dir: project.jaxbSchemaBase, includes: ["**/*.xsd", "**/*.xjb"]),
                file(project.jaxbXsltFile)
        )
        outputs.dir jaxbSafeXSDSources

        doLast {
            targetDir.mkdirs()

            //Find all XSDs in the src/main/resources/META-INF.schema
            if (file(project.jaxbXsltFile).exists()) {
                logger.lifecycle("Transforming Schemas")
                ant.xslt(
                        extension: '.xsd',
                        basedir: project.jaxbSchemaBase,
                        includes: "**/*.xsd",
                        style: project.jaxbXsltFile,
                        destdir: "${jaxbSafeXSDSources}"
                )
            } else {
                logger.lifecycle("NOT Transforming Schemas")
                ant.copy(todir: jaxbSafeXSDSources) {
                    fileset(dir: project.jaxbSchemaBase, includes: "**/*.xsd")

                }

            }

            //Copy over any bindings.xjb into their appropriate directories
            ant.copy(
                    todir: jaxbSafeXSDSources
            ) {
                fileset(dir: project.jaxbSchemaBase, includes: "**/*.xjb")
            }
        }
    }

    /**
     * Not using the jaxb plugin because it cannot support multiple directories of .binding files:
     * https://github.com/jacobono/gradle-jaxb-plugin#jaxb-plugin-convention
     * it cannot handle subfolders, so we'd have to specify the task each time for each folder
     */
    task jaxb(dependsOn: 'transformXSDs') {
        description "compiles XSDs to classes"
        def jaxbTargetDir = file(generatedSources)
        inputs.source(jaxbSafeXSDSources)
        outputs.dir generatedSources

        doLast {
            jaxbTargetDir.mkdirs()
            ant.taskdef(name: 'xjc',
                    classname: 'com.sun.tools.xjc.XJCTask',
                    classpath: configurations.jaxbTasks.asPath
            )
            ant.jaxbTargetDir = jaxbTargetDir
            logger.lifecycle("Generating the JaxBees")
            ant.xjc(
                    destdir: '${jaxbTargetDir}',
                    extension: true //Some of our jaxb stuff requires extensions...
            ) {
                schema(dir: jaxbSafeXSDSources, includes: "**/*.xsd")
                binding(dir: jaxbSafeXSDSources, includes: "**/*.xjb")
            }
        }
    }
}

/**
 * Commons projects
 */

project(":repose-aggregator:commons:configuration") {
    dependencies {
        compile project(":repose-aggregator:commons:utilities"),
                project(":repose-aggregator:core:core-service-api"),
                "xerces:xerces-xsd11:2.12.0-rax",
                "xalan:xalan:2.7.1",
                "commons-pool:commons-pool:${commonsPoolVersion}"

        testCompile "org.scala-lang:scala-library:${scalaVersion}",
                "org.scalatest:scalatest_2.10:$scalaTestVersion",
                "com.typesafe.scala-logging:scala-logging-slf4j_2.10:${scalaLoggingVersion}"
    }
}

project(":repose-aggregator:commons:utilities") {
    dependencies {
        compile project(":repose-aggregator:services:httpclient:api"),
                "org.jvnet.jaxb2_commons:jaxb2-basics-runtime:${jaxbRuntimeVersion}",
                "org.apache.httpcomponents:httpclient:$httpClientVersion",
                "commons-pool:commons-pool:$commonsPoolVersion",
                "commons-codec:commons-codec:1.10",
                "org.apache.commons:commons-lang3:$commonsLangVersion",
                "com.typesafe.scala-logging:scala-logging-slf4j_2.10:$scalaLoggingVersion",
                "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
                "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",
                "javax.ws.rs:javax.ws.rs-api:2.0.1",
                "org.apache.logging.log4j:log4j-api:$log4jVersion",
                "org.glassfish:javax.servlet:3.1", //TODO: this API is some weird hybrid of 2.5 and 3.1.0
                "org.slf4j:slf4j-api:$slf4jVersion",
                "org.apache.httpcomponents:httpcore:$httpClientVersion"

        testCompile "org.scalatest:scalatest_2.10:$scalaTestVersion"

        testCompile("com.mockrunner:mockrunner-servlet:1.0.0") {
            exclude module: 'commons-logging'
            exclude module: 'servlet-api'
            exclude module: 'xercesImpl'
        }


    }
}
/**
 * END OF COMMONS
 */

project(":repose-aggregator:core:core-service-api") {

    //Add this bit if you want JAXB processing to happen first
    //The tasks are customized for the way we store files.
    tasks.compileScala.dependsOn(jaxb)

    dependencies {
        compile "org.jvnet.jaxb2_commons:jaxb2-basics-runtime:${jaxbRuntimeVersion}",
                project(":repose-aggregator:commons:utilities"),
                "com.google.guava:guava:$guavaVersion"
    }
}

//We got through the entire :repose-aggregator:commons:configuration without having to configure anything for it :|
project(":repose-aggregator:components:cli-utils") {

    apply plugin: 'application'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'maven-publish'

    mainClassName = "org.openrepose.cli.CommandDriver"

    shadowJar {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }

    publishing {
        publications {
            shadow(MavenPublication) {
                from components.java
                artifact shadowJar
            }
        }
    }

    //TODO: NEEDS THE SHADE PLUGIN
    dependencies {
        compile project(":repose-aggregator:core:core-lib"),
                project(":repose-aggregator:services:datastore:api"),
                project(":repose-aggregator:commons:utilities")
    }

    artifacts {
        shadow shadowJar
    }

    tasks.build.dependsOn("shadowJar")
}

project(":repose-aggregator:core:core-lib") {
    configurations {
        testingArtifacts {
            transitive = false
        }
    }

    dependencies {
        compile "javax.inject:javax.inject:1",
                project(":repose-aggregator:external:jee6-schemas"),
                project(":repose-aggregator:core:core-service-api"),
                project(":repose-aggregator:commons:utilities"),
                project(":repose-aggregator:commons:configuration"),
                project(":repose-aggregator:services:service-client:api"),
                project(":repose-aggregator:services:service-client:impl"),
                project(":repose-aggregator:services:health-check:api"),
                project(":repose-aggregator:services:health-check:impl"),
                project(":repose-aggregator:services:httpclient:api"),
                project(":repose-aggregator:services:httpclient:impl"),
                project(":repose-aggregator:services:datastore:api"),
                project(":repose-aggregator:services:datastore:impl"),
                project(":repose-aggregator:services:phone-home"),
                "org.apache.httpcomponents:httpclient:$httpClientVersion",
                "org.springframework:spring-core:$springVersion",
                "org.springframework:spring-beans:$springVersion",
                "org.springframework:spring-context:$springVersion",
                "org.springframework:spring-web:$springVersion",
                "com.google.guava:guava:$guavaVersion",
                "commons-io:commons-io:2.4",
                "org.apache.commons:commons-lang3:$commonsLangVersion",
                "joda-time:joda-time:2.6",
                "org.eclipse.jetty:jetty-server:$jettyVersion",
                "com.yammer.metrics:metrics-core:$yammerVersion",
                "com.yammer.metrics:metrics-graphite:$yammerVersion",
                "javax.ws.rs:javax.ws.rs-api:$javaxWsApiVersion",
                "org.apache.logging.log4j:log4j-flume-ng:$log4jVersion",
                "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion",
                "org.apache.logging.log4j:log4j-api:$log4jVersion",
                "org.apache.logging.log4j:log4j-core:$log4jVersion",
                "org.apache.logging.log4j:log4j-jul:$log4jVersion",
                "org.apache.logging.log4j:log4j-iostreams:$log4jVersion",
                "com.fasterxml.jackson.core:jackson-core:$jacksonVersion",
                "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
                "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",
                "com.typesafe:config:$typesafeConfigVersion",
                "org.scala-lang:scala-library:$scalaVersion",
                "javax.servlet:javax.servlet-api:3.1.0"

        testCompile "org.springframework:spring-test:$springVersion",
                "org.scalatest:scalatest_2.10:$scalaTestVersion",
                "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"

        testingArtifacts "org.openrepose.filters.core.test:core-test-filter-bundle:$testArtifactVersion",
                "org.openrepose.filters.core.test:busted-application-name-ear:$testArtifactVersion",
                "org.openrepose.filters.core.test:busted-web-fragment-ear:$testArtifactVersion",
                "org.openrepose.filters.core.test:second-filter-bundle:$testArtifactVersion"
    }

    task copyTestArtifacts << {
        copy {
            from configurations.testingArtifacts
            into 'build/earFiles' //TODO: this is going to require additional changes to the source tree

        }
    }

//For the ReplaceTokens ant filter

/*
TODO: GOING TO HAVE TO DUPE RESOURCES OR SOMETHING, CANT EXIST IN PARALLEL WITH MAVEN :(
This requires all filtering to be done by @value@, not the maven style of doing ${some.value}
 */
    processResources {
        //Hack all the properties to a toString value, because I don't care!
        filter(ReplaceTokens, tokens: project.properties.collectEntries { k, v -> [k.toString(), v.toString() ?: ''] })
    }

    processTestResources {
        //Hack all the properties to a toString value, because I don't care!
        filter(ReplaceTokens, tokens: project.properties.collectEntries { k, v -> [k.toString(), v.toString() ?: ''] })
    }

//Make sure we have our test artifacts before testing
    test.dependsOn("copyTestArtifacts")

    //We can joint compile the java and scala, and are already doing that,
    //and so we need to ensure that the scala stuff is compiled first for this project,
    // Some of the groovy code references scala code.
    compileTestGroovy.dependsOn("compileTestScala")
}

project(":repose-aggregator:core:valve") {
    apply plugin: 'application'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'maven-publish'

    publishing {
        publications {
            shadow(MavenPublication) {
                from components.java
                artifact shadowJar
            }
        }
    }

    dependencies {
        compile project(":repose-aggregator:core:core-lib"),
                project(":repose-aggregator:core:core-service-api"),
                "org.scala-lang:scala-library:$scalaVersion",
                "com.github.scopt:scopt_2.10:3.2.0",
                "com.typesafe:config:$typesafeConfigVersion",
                "org.springframework:spring-web:$springVersion",
                "org.springframework:spring-context:$springVersion",
                "org.springframework:spring-beans:$springVersion",
                "org.springframework:spring-core:$springVersion",
                "org.eclipse.jetty:jetty-server:$jettyVersion",
                "org.eclipse.jetty:jetty-servlet:$jettyVersion",
                "org.eclipse.jetty:jetty-util:$jettyVersion",
                "org.eclipse.jetty:jetty-webapp:$jettyVersion",
                "com.typesafe.scala-logging:scala-logging-slf4j_2.10:$scalaLoggingVersion",
                "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion",
                "org.apache.logging.log4j:log4j-core:$log4jVersion"
        //TODO: do I need to include httpclient here because it's needed in tests now, or will shadow jar be smarter than maven's shade?

        testCompile "javax.servlet:javax.servlet-api:3.1.0",
                "org.scalatest:scalatest_2.10:$scalaTestVersion",
                "org.apache.httpcomponents:httpclient:$httpClientVersion"
    }

    processResources {
        //Hack all the properties to a toString value, because I don't care!
        filter(ReplaceTokens, tokens: project.properties.collectEntries { k, v -> [k.toString(), v.toString() ?: ''] })
    }

    processTestResources {
        from('src/main/resources') {
            //Copy all the resources without filtering!
            //This is needed because filtering breaks the binary .jks file, but we still need to copy it
        }
        from('src/main/resources') {
            //Copy the resources that actually need to be filtered!
            include '**/*.conf'
            //Hack all the properties to a toString value, because I don't care!
            filter(ReplaceTokens, tokens: project.properties.collectEntries { k, v -> [k.toString(), v.toString() ?: ''] })
        }
    }

    mainClassName = "org.openrepose.valve.Main"

    shadowJar {
        //TODO: have to deal with the log4jPlugins.dat from the log4j-flume-ng dependency ?
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }

    tasks.build.dependsOn("shadowJar")

    artifacts {
        shadow shadowJar
    }
}

project(":repose-aggregator:core:web-application") {
    apply plugin: 'war'

    configurations {
        warFile
    }

    artifacts {
        warFile war
    }

    war.archiveName = "ROOT.war"

    dependencies {
        compile project(":repose-aggregator:core:core-service-api"),
                project(":repose-aggregator:core:core-lib"),
                "com.typesafe:config:$typesafeConfigVersion",
                "org.scala-lang:scala-library:$scalaVersion",
                "org.springframework:spring-beans:$springVersion",
                "org.springframework:spring-context:$springVersion",
                "org.springframework:spring-web:$springVersion",
                "org.springframework:spring-core:$springVersion",
                "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion",
                "org.apache.logging.log4j:log4j-core:$log4jVersion"

        testCompile "org.scalatest:scalatest_2.10:$scalaTestVersion"
    }
}

/**
 * SERVICES
 */

project(":repose-aggregator:services:phone-home") {
    dependencies {
        compile project(":repose-aggregator:core:core-service-api"),
                project(":repose-aggregator:commons:utilities"),
                project(":repose-aggregator:services:service-client:api"),
                "org.scala-lang:scala-library:$scalaVersion",
                "com.typesafe.scala-logging:scala-logging-slf4j_2.10:$scalaLoggingVersion",
                "com.typesafe.play:play-json_2.10:$playJsonVersion",
                "org.springframework:spring-beans:$springVersion",
                "javax.inject:javax.inject:1"

        testCompile "org.scalatest:scalatest_2.10:$scalaTestVersion",
                "com.sun.jersey:jersey-server:$jerseyServerVersion"
    }
}

project(":repose-aggregator:services:service-client:api") {
    dependencies {
        compile project(":repose-aggregator:commons:utilities")
    }
}

project(":repose-aggregator:services:service-client:impl") {
    dependencies {
        compile project(":repose-aggregator:commons:utilities"),
                project(":repose-aggregator:services:service-client:api"),
                project(":repose-aggregator:services:httpclient:api"),
                "com.typesafe.akka:akka-actor_2.10:2.2.3",
                "com.typesafe:config:$typesafeConfigVersion",
                "com.google.guava:guava:$guavaVersion",
                "commons-io:commons-io:2.4",
                "org.scala-lang:scala-library:$scalaVersion",
                "javax.inject:javax.inject:1"

        testCompile "org.scalatest:scalatest_2.10:$scalaTestVersion",
                "com.sun.jersey:jersey-server:$jerseyServerVersion",
                "com.typesafe.scala-logging:scala-logging-slf4j_2.10:$scalaLoggingVersion",
                "org.eclipse.jetty:jetty-server:$jettyVersion"

        //TODO: the mavens did some extraction of the reference.conf for akka, but I really think that's not necessary....
    }
}

project(":repose-aggregator:services:datastore:api") {
    dependencies {
        compile project(":repose-aggregator:core:core-service-api"),
                project(":repose-aggregator:commons:utilities")
    }
}

project(":repose-aggregator:services:datastore:impl") {

    tasks.compileScala.dependsOn(jaxb)

    dependencies {
        compile project(":repose-aggregator:core:core-service-api"),
                project(":repose-aggregator:services:datastore:api"),
                project(":repose-aggregator:services:health-check:api"),
                project(":repose-aggregator:commons:utilities"),
                project(":repose-aggregator:services:rate-limiting-service"),
                "com.google.guava:guava:$guavaVersion",
                "org.springframework:spring-beans:$springVersion",
                "org.jvnet.jaxb2_commons:jaxb2-basics-runtime:$jaxbRuntimeVersion",
                "org.eclipse.jetty:jetty-server:$jettyVersion",
                "org.eclipse.jetty:jetty-servlet:$jettyVersion",
                "net.sf.ehcache:ehcache-core:2.6.0",
                "com.yammer.metrics:metrics-ehcache:$yammerVersion",
                "org.apache.commons:commons-lang3:$commonsLangVersion",
                "javax.inject:javax.inject:1"

        testCompile "xerces:xerces-xsd11:$xercesRaxVersion"
    }
}

project(":repose-aggregator:services:rate-limiting-service") {

    tasks.compileScala.dependsOn(jaxb)

    dependencies {
        compile project(":repose-aggregator:services:datastore:api"),
                "xerces:xerces-xsd11:$xercesRaxVersion",
                "org.apache.commons:commons-lang3:$commonsLangVersion",
                "org.jvnet.jaxb2_commons:jaxb2-basics-runtime:$jaxbRuntimeVersion"

    }
}
project(":repose-aggregator:services:health-check:api") {
    dependencies {
        compile project(":repose-aggregator:core:core-service-api"),
                project(":repose-aggregator:commons:utilities")

    }
}

project(":repose-aggregator:services:health-check:impl") {
    dependencies {
        compile project(":repose-aggregator:services:health-check:api"),
                "javax.inject:javax.inject:1"
    }
}
project(":repose-aggregator:services:httpclient:api") {
    dependencies {
        compile "org.apache.httpcomponents:httpclient:$httpClientVersion"
    }
}

project(":repose-aggregator:services:httpclient:impl") {

    tasks.compileScala.dependsOn(jaxb)

    dependencies {
        compile project(":repose-aggregator:services:httpclient:api"),
                project(":repose-aggregator:core:core-service-api"),
                project(":repose-aggregator:services:health-check:api"),
                "org.jvnet.jaxb2_commons:jaxb2-basics-runtime:$jaxbRuntimeVersion",
                "org.apache.httpcomponents:httpclient:4.2.5", //TODO: commons-codec exclusion?
                "javax.inject:javax.inject:1"

        testCompile "xerces:xerces-xsd11:$xercesRaxVersion"

    }
}

/**
 * END OF SERVICES
 */

/**
 * EXTERNAL
 */

project(":repose-aggregator:external:jee6-schemas") {

    tasks.compileScala.dependsOn(jaxb)

    dependencies {
        compile "org.jvnet.jaxb2_commons:jaxb2-basics-runtime:$jaxbRuntimeVersion"
    }
}
project(":repose-aggregator:external:os-auth-schemas") {
    project.ext.jaxbXsltFile = "$projectDir/src/main/resources/META-INF/schema/xsl/s1.0p.xsl"

    tasks.compileScala.dependsOn(jaxb)

    dependencies {
        compile "org.jvnet.jaxb2_commons:jaxb2-basics-runtime:$jaxbRuntimeVersion"
    }
}

project(":repose-aggregator:external:pjl-compressingFilter") {
    repositories {
        maven {
            url "https://repository.jboss.org/nexus/content/repositories/thirdparty-releases"
        }
    }

    //Because this is an "external" filter, we have to exclude some of our dependencies we're mashing into *every* project
    // Until we stop mashing those dependencies into every project...
    configurations {
        //all*.exclude group: "org.glassfish", module: "javax.servlet"
        all*.exclude group: "com.mockrunner", module: "mockrunner-servlet"
    }

    dependencies {
        compile project(":repose-aggregator:commons:utilities")

        //Explicitly not using our managed version of this, because we're not making any further changes to the code
        // The newer mockrunner library causes problems.
        //There's some ordering here that's borking lots of things
        testCompile "com.mockrunner:mockrunner:0.4.1",
                "org.jboss.spec:jboss-javaee-6.0:1.0.0.Final"
    }
}

project(":repose-aggregator:external:service-clients:auth") {
    dependencies {
        compile project(":repose-aggregator:external:os-auth-schemas"),
                project(":repose-aggregator:commons:utilities"),
                project(":repose-aggregator:services:httpclient:api"),
                project(":repose-aggregator:services:service-client:api"),
                project(":repose-aggregator:core:core-lib"),
                "commons-codec:commons-codec:1.8",
                "commons-pool:commons-pool:$commonsPoolVersion",
                "com.sun.jersey:jersey-client:$jerseyServerVersion",
                "com.sun.jersey:jersey-server:$jerseyServerVersion",
                "commons-io:commons-io:2.4"

        testCompile "javax.mail:mail:1.4.4"
    }
}


/**
 * Experimental Filter Bundle
 **/
project(":repose-aggregator:experimental:exception-filter") {
    dependencies {
        compile "org.apache.commons:commons-lang3:$commonsLangVersion",
                "javax.inject:javax.inject:1",
                "org.slf4j:slf4j-api:$slf4jVersion",
                "org.glassfish:javax.servlet:3.1" //TODO: provided?
    }
}

project(":repose-aggregator:experimental:servlet-contract-filter") {
    dependencies {
        compile "org.apache.commons:commons-lang3:$commonsLangVersion",
                "javax.inject:javax.inject:1",
                "org.slf4j:slf4j-api:$slf4jVersion",
                "org.glassfish:javax.servlet:3.1" //TODO: provided?
    }
}

project(":repose-aggregator:experimental:tightly-coupled-filter") {
    dependencies {
        compile project(path: ":repose-aggregator:commons:utilities", transitive: false),
                "org.apache.commons:commons-lang3:$commonsLangVersion",
                "javax.inject:javax.inject:1",
                "org.slf4j:slf4j-api:$slf4jVersion",
                "org.glassfish:javax.servlet:3.1" //TODO: provided?
    }
}

project(":repose-aggregator:experimental:experimental-filter-bundle") {
    apply plugin: 'ear'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'maven-publish-auth'

    configurations {
        earFile
    }

    artifacts {
        earFile ear
    }

    //All the projects this guy depends on. We don't put them in dependencies, because we have to hit them up twice.
    def deps = [
            ':repose-aggregator:experimental:exception-filter',
            ':repose-aggregator:experimental:experimental-filter-bundle',
            ':repose-aggregator:experimental:servlet-contract-filter',
            ':repose-aggregator:experimental:tightly-coupled-filter'
    ]

    dependencies {
        deps.each { proj ->
            deploy project(proj)
            earlib project(path: proj, configuration: 'compile')
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                artifact ear
            }
        }
        repositories {
            maven {
                name "releases.maven.research.rackspace.com"
                url "http://maven.research.rackspacecloud.com/content/repositories/releases"
            }
        }
    }
}

/**
 * Extensions Filter Bundle
 **/

project(":repose-aggregator:extensions:api-validator") {

    tasks.compileScala.dependsOn(jaxb)

    dependencies {
        compile project(":repose-aggregator:core:core-lib"),
                project(":repose-aggregator:core:core-service-api"),
                project(":repose-aggregator:commons:configuration"),
                project(":repose-aggregator:commons:utilities"),
                "org.jvnet.jaxb2_commons:jaxb2-basics-runtime:$jaxbRuntimeVersion",
                "org.scala-lang:scala-library:$scalaVersion",
                "org.springframework:spring-beans:$springVersion",
                "com.rackspace.papi.components.api-checker:checker-core:1.1.2"

    }
}

project(":repose-aggregator:extensions:simple-rbac") {

    tasks.compileScala.dependsOn(jaxb)

    dependencies {
        compile project(":repose-aggregator:core:core-lib"),
                project(":repose-aggregator:core:core-service-api"),
                project(":repose-aggregator:commons:configuration"),
                project(":repose-aggregator:commons:utilities"),
                "org.apache.commons:commons-lang3:$commonsLangVersion",
                "org.jvnet.jaxb2_commons:jaxb2-basics-runtime:$jaxbRuntimeVersion",
                "org.scala-lang:scala-library:$scalaVersion",
                "com.typesafe.scala-logging:scala-logging-slf4j_2.10:$scalaLoggingVersion",
                "org.springframework:spring-beans:$springVersion",
                "com.rackspace.papi.components.api-checker:checker-core:1.1.2"

        testCompile "org.scalatest:scalatest_2.10:$scalaTestVersion",
                "org.springframework:spring-test:$springVersion"

        testCompile("com.mockrunner:mockrunner-servlet:1.0.0") {
            exclude module: 'commons-logging'
            exclude module: 'servlet-api'
            exclude module: 'xercesImpl'
        }
    }
}

project(":repose-aggregator:extensions:extensions-filter-bundle") {

    apply plugin: 'ear'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'maven-publish-auth'

    configurations {
        earFile
    }

    artifacts {
        earFile ear
    }

//All the projects this guy depends on. We don't put them in dependencies, because we have to hit them up twice.
    def deps = [
            ':repose-aggregator:extensions:api-validator',
            ':repose-aggregator:extensions:simple-rbac'
    ]

    dependencies {
        deps.each { proj ->
            deploy project(proj)
            earlib project(path: proj, configuration: 'compile')
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                artifact ear
            }
        }
        repositories {
            maven {
                name "releases.maven.research.rackspace.com"
                url "http://maven.research.rackspacecloud.com/content/repositories/releases"
            }
        }
    }
}

/**
 * FUNCTIONAL TESTS
 **/

project(":repose-aggregator:functional-tests:container-support") {
    dependencies {
        compile "commons-cli:commons-cli:1.2"
    }
}

project(":repose-aggregator:functional-tests:glassfish-support") {
    apply plugin: 'application'
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile project(":repose-aggregator:functional-tests:container-support"),
                "org.glassfish.main.extras:glassfish-embedded-all:3.1.2.2",
                "commons-cli:commons-cli:1.2",
                "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion",
                "org.apache.logging.log4j:log4j-api:$log4jVersion",
                "org.apache.logging.log4j:log4j-core:$log4jVersion"
    }

    mainClassName = "org.openrepose.commons.utils.test.glassfish.ReposeGlassfishServer"

    tasks.build.dependsOn("shadowJar")

    artifacts {
        shadow shadowJar
    }
}

project(":repose-aggregator:functional-tests:tomcat-support") {
    apply plugin: 'application'
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile project(":repose-aggregator:functional-tests:container-support"),
                project(":repose-aggregator:functional-tests:mocks-util"),
                "org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion",
                "org.apache.tomcat.embed:tomcat-embed-logging-juli:$tomcatVersion",
                "org.apache.tomcat.embed:tomcat-embed-jasper:$tomcatVersion",
                "org.apache.tomcat:tomcat-jasper:$tomcatVersion",
                "org.apache.tomcat:tomcat-jasper-el:$tomcatVersion",
                "org.apache.tomcat:tomcat-jsp-api:$tomcatVersion",
                "commons-cli:commons-cli:1.2",
                "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion",
                "org.apache.logging.log4j:log4j-api:$log4jVersion",
                "org.apache.logging.log4j:log4j-core:$log4jVersion"
    }

    mainClassName = "org.openrepose.commons.utils.test.tomcat.ReposeTomcatServer"

    tasks.build.dependsOn("shadowJar")

    artifacts {
        shadow shadowJar
    }
}

project(":repose-aggregator:functional-tests:test-support") {
    apply plugin: 'war'

    dependencies {
        compile "com.sun.jersey:jersey-server:1.9.1",
                project(":repose-aggregator:external:os-auth-schemas"),
                project(":repose-aggregator:services:rate-limiting-service"),
                project(":repose-aggregator:components:filters:rate-limiting"),
                project(":repose-aggregator:commons:utilities"),
                "net.sourceforge.pjl-comp-filter:pjl-comp-filter:1.7", //TODO: should this not be our version?
                "com.sun.jersey:jersey-client:1.16",
                "com.fasterxml.jackson.core:jacon-annotations:$jacksonVersion",
                "com.fasterxml.jackson.core:jackson-core:$jacksonVersion",
                "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"

        testCompile "com.sun.jersey.test.framework:jersey-test-framework:1.0.3.1",
                "javax.mail:mail:1.4.4"
    }
}

project(":repose-aggregator:functional-tests:mocks-servlet") {
    apply plugin: 'war'

    configurations {
        warFile
    }

    artifacts {
        warFile war
    }

    dependencies {
        compile project(":repose-aggregator:functional-tests:mocks-util"),
                "com.sun.jersey:jersey-server:$jerseyServerVersion",
                "org.slf4j:slf4j-api:$slf4jVersion"

    }
}
project(":repose-aggregator:functional-tests:mocks-util") {

    //Override the default project property to point at a different jaxb schema base
    project.ext.jaxbSchemaBase = "$projectDir/src/main/resources/META-INF/request-info"

    tasks.compileScala.dependsOn(jaxb)

    dependencies {
        compile "commons-io:commons-io:2.4",
                "org.jvnet.jaxb2_commons:jaxb2-basics-runtime:$jaxbRuntimeVersion",
                "javax.servlet:javax.servlet-api:3.1.0"
    }
}

project(":repose-aggregator:functional-tests:spock-functional-test") {

    //Define the configurations to pull in shadow-jar, ear, or war dependencies
    configurations {
        filterBundles { transitive = false }
        tomcat { transitive = false }
        glassfish { transitive = false }
        valve { transitive = false }
        rootWar { transitive = false }
        mocks { transitive = false }
    }

    dependencies {

        filterBundles project(path: ":repose-aggregator:components:filters:filter-bundle", configuration: "earFile"),
                project(path: ":repose-aggregator:experimental:experimental-filter-bundle", configuration: "earFile"),
                project(path: ":repose-aggregator:extensions:extensions-filter-bundle", configuration: "earFile"),
                "org.openrepose.filters.core.test:classloader-bundle-one:3.0",
                "org.openrepose.filters.core.test:classloader-bundle-two:3.0",
                "org.openrepose.filters.core.test:classloader-bundle-three:3.0",
                "org.openrepose.filters.core.test:classloader-bundle-four:3.0",
                "org.openrepose.filters.core.test:classloader-bundle-five:3.0"

        tomcat project(path: ":repose-aggregator:functional-tests:tomcat-support", configuration: "shadow")

        glassfish project(path: ":repose-aggregator:functional-tests:glassfish-support", configuration: "shadow")

        valve project(path: ":repose-aggregator:core:valve", configuration: "shadow")

        rootWar project(path: ":repose-aggregator:core:web-application", configuration: "warFile")

        mocks project(path: ":repose-aggregator:functional-tests:mocks-servlet", configuration: "warFile")

        compile project(":repose-aggregator:functional-tests:mocks-util"),
                project(":repose-aggregator:functional-tests:mocks-servlet"),
                project(":repose-aggregator:commons:utilities"),
                project(":repose-aggregator:core:core-lib"),
                project(":repose-aggregator:commons:configuration"),
                project(":repose-aggregator:services:datastore:api"),
                "org.glassfish.main.extras:glassfish-embedded-all:3.1.2.2",
                "org.codehaus.jackson:jackson-core-lgpl:1.9.13",
                "joda-time:joda-time:$jodaTimeVersion",
                "org.eclipse.jetty:jetty-server:$jettyVersion",
                "commons-io:commons-io:2.4",
                "org.linkedin:org.linkedin.util-groovy:1.8.0",
                "org.apache.httpcomponents:httpclient:$httpClientVersion",
                "org.rackspace:deproxy:0.21",
                "xerces:xerces-xsd11:2.12.0-rax",
                "commons-codec:commons-codec:1.8"
    }

    sourceSets {
        configs {
            resources {
                srcDir 'src/test/configs' //TODO: don't want to filter these
            }
        }
    }

    //Define some stuff that's used for the functional tests
    def reposeHome = "$buildDir/repose_home"
    def filterTokens = project.properties.collectEntries { k, v -> [k.toString(), v.toString() ?: ''] }

    filterTokens += [
            "repose.home"                : reposeHome,
            "repose.config.directory"    : "$buildDir/repose_home/configs",
            "repose.raw.config.directory": "$projectDir/src/test/configs",
            "repose.valve.jar.location"  : "$reposeHome/valve-$version-all.jar",
            "repose.config.templates"    : "$buildDir/resources/configs",
            "repose.root.war.location"   : "$reposeHome/ROOT.war",
            "target.hostname"            : "localhost",
            "repose.container"           : "valve"
    ].collectEntries { k, v -> [k.toString(), v.toString()] } //Stupid ancient ant tasks

    processResources {
        //Hack all the properties to a toString value, because I don't care!
        filter(ReplaceTokens, tokens: filterTokens)
    }

    processTestResources {
        //Hack all the properties to a toString value, because I don't care!
        filter(ReplaceTokens, tokens: filterTokens)
    }

    //We don't actually want to run the functional tests every time we do this :D
    test.enabled = false

    task("test", overwrite: true) {
        doLast {
            println("I AM THE LIZARD KING")
        }
    }

    task("copyFilterBundles", type: Copy) {
        from configurations.filterBundles
        into "$reposeHome/artifacts"
    }

    task("copyTomcat", type: Copy) {
        from configurations.tomcat
        into "$reposeHome"
    }

    task("copyGlassfish", type: Copy) {
        from configurations.glassfish
        into reposeHome
    }

    task("copyValve", type: Copy) {
        from configurations.valve
        into reposeHome
    }

    task("copyRootWar", type: Copy) {
        from configurations.rootWar
        into reposeHome
    }

    task("copyMocksWar", type: Copy) {
        from configurations.mocks
        into reposeHome
    }

    tasks.build.dependsOn(["copyFilterBundles", "copyTomcat", "copyGlassfish", "copyValve", "copyRootWar", "copyMocksWar"])

    task("integrationTests", type: Test) {
        dependsOn(["build"])
        description "Run *ALL* the integration tests"
        testClassesDir = sourceSets.test.output.classesDir
        classpath = sourceSets.test.runtimeClasspath + sourceSets.configs.runtimeClasspath
    }

    tasks.addRule("Pattern: iTest<ClassName>") { String taskName ->
        if (taskName.startsWith("iTest")) {
            def testClass = (taskName - "iTest")
            task(taskName, type: Test) {
                description("Run a single integration test")
                dependsOn(['build'])
                testClassesDir = sourceSets.test.output.classesDir
                classpath = sourceSets.test.runtimeClasspath + sourceSets.configs.runtimeClasspath
                include "**/${testClass}.*"

                testLogging {
                    events 'started', 'passed'
                }
            }
        }
    }
}

/**
 * FILTER BUNDLE!
 */
project(":repose-aggregator:components:filters:filter-bundle") {
    apply plugin: 'ear'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'maven-publish-auth'

//One of the things we depend on needs this repo
    repositories {
        maven {
            url "http://repo.typesafe.com/typesafe/maven-releases"
        }
    }

    configurations {
        earFile
    }

    artifacts {
        earFile ear
    }

//All the projects this guy depends on. We don't put them in dependencies, because we have to hit them up twice.
    def deps = [
            ':repose-aggregator:components:filters:add-header',
            ':repose-aggregator:components:filters:client-auth',
            ':repose-aggregator:components:filters:client-authorization',
            ':repose-aggregator:components:filters:client-ip-identity',
            ':repose-aggregator:components:filters:compression',
            ':repose-aggregator:components:filters:content-normalization',
            ':repose-aggregator:components:filters:content-type-stripper',
            ':repose-aggregator:components:filters:derp',
            ':repose-aggregator:components:filters:destination-router',
            ':repose-aggregator:components:filters:echo',
            ':repose-aggregator:components:filters:flush-output',
            ':repose-aggregator:components:filters:forwarded-proto',
            ':repose-aggregator:components:filters:header-id-mapping',
            ':repose-aggregator:components:filters:header-identity',
            ':repose-aggregator:components:filters:header-normalization',
            ':repose-aggregator:components:filters:header-translation',
            ':repose-aggregator:components:filters:herp',
            ':repose-aggregator:components:filters:iri-validator',
            ':repose-aggregator:components:filters:keystone-v2',
            ':repose-aggregator:components:filters:merge-header',
            ':repose-aggregator:components:filters:openstack-identity-v3',
            ':repose-aggregator:components:filters:rackspace-auth-user',
            ':repose-aggregator:components:filters:rackspace-identity-basic-auth',
            ':repose-aggregator:components:filters:rate-limiting',
            ':repose-aggregator:components:filters:slf4j-http-logging',
            ':repose-aggregator:components:filters:translation',
            ':repose-aggregator:components:filters:uri-identity',
            ':repose-aggregator:components:filters:uri-normalization',
            ':repose-aggregator:components:filters:uri-stripper',
            ':repose-aggregator:components:filters:versioning'
    ]

    dependencies {
        deps.each { proj ->
            deploy project(proj)
            //Followed this advice:
            // http://stackoverflow.com/questions/24366424/gradle-ear-with-transitive-libs-from-other-projects
            earlib project(path: proj, configuration: 'compile')
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                artifact ear
            }
        }
        repositories {
            maven {
                name "releases.maven.research.rackspace.com"
                url "http://maven.research.rackspacecloud.com/content/repositories/releases"
            }
        }
    }
}
project(":repose-aggregator:components:filters:add-header") {
    tasks.compileScala.dependsOn(jaxb)
    dependencies {
        compile project(":repose-aggregator:core:core-lib"),
                project(":repose-aggregator:core:core-service-api"),
                project(":repose-aggregator:commons:utilities"),
                "org.jvnet.jaxb2_commons:jaxb2-basics-runtime:$jaxbRuntimeVersion",
                "org.scala-lang:scala-library:$scalaVersion",
                "com.typesafe.scala-logging:scala-logging-slf4j_2.10:$scalaLoggingVersion"

        testCompile "org.scalatest:scalatest_2.10:$scalaTestVersion",
                "com.mockrunner:mockrunner-servlet:1.0.0"
    }
}
project(":repose-aggregator:components:filters:client-auth") {
    tasks.compileScala.dependsOn(jaxb)
    dependencies {
        compile project(":repose-aggregator:core:core-lib"),
                project(":repose-aggregator:core:core-service-api"),
                project(":repose-aggregator:commons:utilities"),
                project(":repose-aggregator:external:service-clients:auth"),
                project(":repose-aggregator:services:datastore:api"),
                project(":repose-aggregator:services:service-client:api"),
                project(":repose-aggregator:external:os-auth-schemas"),
                project(":repose-aggregator:services:httpclient:api"),
                "org.apache.commons:commons-lang3:$commonsLangVersion",
                "org.jvnet.jaxb2_commons:jaxb2-basics-runtime:$jaxbRuntimeVersion",
                "org.openrepose:http-delegation:$httpDelegationVersion"

        testCompile "net.sf.ehcache:ehcache-core:2.6.0",
                "com.mockrunner:mockrunner-servlet:1.0.0",
                "cglib:cglib-nodep:2.2.2"
    }
}
