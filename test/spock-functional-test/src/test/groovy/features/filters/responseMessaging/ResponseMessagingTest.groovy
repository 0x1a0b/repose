package features.filters.responsemessaging

import framework.ReposeValveTest
import org.rackspace.gdeproxy.Deproxy
import org.rackspace.gdeproxy.Response
import spock.lang.Shared
import spock.lang.Unroll

/**
 * ADDITIONAL SCENARIOS TO TEST:
 *
 * 1. Origin service responds with 345, 345 is configured with overwrite="IF_EMPTY", REPOSE does NOT apply RMS body
 * 2. RMS is configured to respond with a different status code than what origin service responds with
 */
class ResponseMessagingTest extends ReposeValveTest {

    def setupSpec() {
        deproxy = new Deproxy()
        deproxy.addEndpoint(properties.getProperty("target.port").toInteger())

        repose.applyConfigs("features/filters/responsemessaging")
        repose.start()
        waitUntilReadyToServiceRequests()
    }

    def cleanupSpec() {
        if (deproxy) {
            deproxy.shutdown()
        }

        if (repose) {
            repose.stop()
        }
    }

    @Unroll("Repose should return expected response code #expectedResponseCode and body for #acceptType")
    def "test response body is generated by response messaging config"() {

        when: "A request is made to repose with accept type of #acceptType"
        def messageChain = deproxy.makeRequest([url: reposeEndpoint, headers: ["Accept": acceptType], defaultHandler: originServiceResponse])

        then: "Repose should return the expected response code"
        messageChain.receivedResponse.code == expectedResponseCode

        and: "Repose should return the expected response body"
        messageChain.receivedResponse.body == expectedResponseBody

        where:
        acceptType         | originServiceResponse                 | expectedResponseCode | expectedResponseBody
        "application/xml"  | responseGenerator(413)                | "413"                | XML_RESPONSE_413
        "application/xml"  | responseGenerator(403)                | "403"                | "XML Not Authorized... Syntax highlighting is magical."
        "application/json" | responseGenerator(405)                | "405"                | "JSON Not Authorized... The brackets are too confusing."
        "text/plain"       | responseGenerator(404)                | "404"                | "You are not authorized... Did you drop your ID?"
        "application/json" | responseGenerator(346)                | "346"                | JSON_RESPONSE_346
        "application/xml"  | responseGenerator(345)                | "345"                | XML_RESPONSE_345
        "application/json" | responseGenerator(345)                | "345"                | JSON_RESPONSE_345
        ""                 | responseGenerator(345)                | "345"                | JSON_RESPONSE_345
        "application/json" | responseGenerator(414, ORIGINAL_BODY) | "414"                | ORIGINAL_BODY
        "*/*"              | responseGenerator(503)                | "503"                | "An error has occured. Please contact support... the printer may be on fire."
        "application/xml"  | responseGenerator(333, "JAWSOME")     | "333"                | "JAWSOME"
        "application/json" | responseGenerator(333, "JAWSOME")     | "333"                | "JAWSOME"
        "text/plain"       | responseGenerator(333, "JAWSOME")     | "333"                | "JAWSOME"
    }

    @Unroll("ResponseMessaging populates responseBody with request headers for #acceptType")
    def "test response bodies that include headers from request when accepting #acceptType"() {
        given:
        def String myDate = "Fri, 09 Mar 2012 14:56:32 GMT"


        when: "A request is made to repose with accept type of #acceptType"
        def messageChain = deproxy.makeRequest([url: reposeEndpoint, headers: ["Accept": acceptType, "MYDATE": myDate, "X-PP-Groups":"WIZARD"],
                defaultHandler: originServiceResponse])

        then: "Repose should return the expected response code"
        messageChain.receivedResponse.code == expectedResponseCode

        and: "Repose should return the expected response body"
        messageChain.receivedResponse.body == expectedResponseBody

        where:
        acceptType         | originServiceResponse                 | expectedResponseCode | expectedResponseBody
        "application/xml"  | responseGenerator(333, "JAWSOME")     | "333"                | "<outer><groups>WIZARD</groups><somedate>2012-03-09T14:56:32Z</somedate></outer>"
        "application/json" | responseGenerator(333, "JAWSOME")     | "333"                | """{ "groups": "WIZARD", "mydate": "2012-03-09T14:56:32Z" }"""
        "text/plain"       | responseGenerator(333, "JAWSOME")     | "333"                | """X-PP-Groups: WIZARD
	    MY-DATE: 2012-03-09T14:56:32Z"""
    }


    def "D-12726 RMS should not throw NPE if response body is empty"() {
        when: "A request is made to repose with accept type of #acceptType"
        def messageChain = deproxy.makeRequest([url: reposeEndpoint, headers: ["Accept": "application/xml"]])

        then: "Repose should return the expected response code"
        messageChain.receivedResponse.code == "200"
    }

    def responseGenerator(code, body = null) {
        return { request -> return new Response(code, null, null, body) }
    }

    @Shared
    def XML_RESPONSE_413 =
        """<overLimit
    xmlns="http://docs.openstack.org/common/api/v1.1"
    code="413" retryAfter="">
  <message>OverLimit Retry...</message>
  <details>Error Details...</details>
</overLimit>""";

    @Shared
    def JSON_RESPONSE_346 = """{
    "response" : {
        "code" : 346
    }
}"""

    @Shared
    def XML_RESPONSE_345 = """<response
    xmlns="http://docs.openstack.org/common/api/v1.1"
    code="345">
  <message>Woohooo!  You got a 345!</message>
</response>"""

    @Shared
    def JSON_RESPONSE_345 = """{
    "response" : {
        "code" : 345
    }
}"""
    @Shared String ORIGINAL_BODY = "Origin Service says hello!"

}
